

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Feb 15 00:43:44 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    34   000000                     
    35                           ; Version 2.40
    36                           ; Generated 17/11/2021 GMT
    37                           ; 
    38                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution. Publication is not required when
    52                           ;        this file is used in an embedded application.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC18F4620 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70   000000                     
    71                           	psect	idataCOMRAM
    72   001AFA                     __pidataCOMRAM:
    73                           	callstack 0
    74                           
    75                           ;initializer for _keypad
    76   001AFA  03                 	db	3
    77   001AFB  0B                 	db	11
    78   001AFC  13                 	db	19
    79   001AFD  1B                 	db	27
    80   001AFE  23                 	db	35
    81   001AFF  2B                 	db	43
    82   001B00  33                 	db	51
    83   001B01  3B                 	db	59
    84   001B02  01                 	db	1
    85                           
    86                           ;initializer for _lcd
    87   001B03  15                 	db	21
    88   001B04  14                 	db	20
    89   001B05  10                 	db	16
    90   001B06  11                 	db	17
    91   001B07  12                 	db	18
    92   001B08  13                 	db	19
    93                           
    94                           	psect	smallconst
    95   001000                     __psmallconst:
    96                           	callstack 0
    97   001000  00                 	db	0
    98   001001                     _keypad_buttons:
    99                           	callstack 0
   100   001001  37                 	db	55
   101   001002  38                 	db	56
   102   001003  39                 	db	57
   103   001004  2F                 	db	47
   104   001005  34                 	db	52
   105   001006  35                 	db	53
   106   001007  36                 	db	54
   107   001008  2A                 	db	42
   108   001009  31                 	db	49
   109   00100A  32                 	db	50
   110   00100B  33                 	db	51
   111   00100C  2D                 	db	45
   112   00100D  63                 	db	99
   113   00100E  30                 	db	48
   114   00100F  3D                 	db	61
   115   001010  2B                 	db	43
   116   001011                     __end_of_keypad_buttons:
   117                           	callstack 0
   118   001011                     _port_regs:
   119                           	callstack 0
   120   001011  80                 	db	128
   121   001012  0F                 	db	15
   122   001013  81                 	db	129
   123   001014  0F                 	db	15
   124   001015  82                 	db	130
   125   001016  0F                 	db	15
   126   001017  83                 	db	131
   127   001018  0F                 	db	15
   128   001019  84                 	db	132
   129   00101A  0F                 	db	15
   130   00101B                     __end_of_port_regs:
   131                           	callstack 0
   132   00101B                     _lat_regs:
   133                           	callstack 0
   134   00101B  89                 	db	137
   135   00101C  0F                 	db	15
   136   00101D  8A                 	db	138
   137   00101E  0F                 	db	15
   138   00101F  8B                 	db	139
   139   001020  0F                 	db	15
   140   001021  8C                 	db	140
   141   001022  0F                 	db	15
   142   001023  8D                 	db	141
   143   001024  0F                 	db	15
   144   001025                     __end_of_lat_regs:
   145                           	callstack 0
   146   001025                     _tris_regs:
   147                           	callstack 0
   148   001025  92                 	db	146
   149   001026  0F                 	db	15
   150   001027  93                 	db	147
   151   001028  0F                 	db	15
   152   001029  94                 	db	148
   153   00102A  0F                 	db	15
   154   00102B  95                 	db	149
   155   00102C  0F                 	db	15
   156   00102D  96                 	db	150
   157   00102E  0F                 	db	15
   158   00102F                     __end_of_tris_regs:
   159                           	callstack 0
   160   000000                     _INTCON2bits	set	4081
   161   00102F  00                 	db	0	; dummy byte at the end
   162   000000                     
   163                           	psect	nvCOMRAM
   164   000052                     __pnvCOMRAM:
   165                           	callstack 0
   166   000052                     _ret_val:
   167                           	callstack 0
   168   000052                     	ds	1
   169   000000                     _PORTE	set	3972
   170   000000                     _PORTD	set	3971
   171   000000                     _PORTC	set	3970
   172   000000                     _PORTB	set	3969
   173   000000                     _PORTA	set	3968
   174   000000                     _LATA	set	3977
   175   000000                     _TRISA	set	3986
   176   000000                     _INTCON3bits	set	4080
   177   000000                     _INTCONbits	set	4082
   178   000000                     _TRISE	set	3990
   179   000000                     _TRISD	set	3989
   180   000000                     _TRISC	set	3988
   181   000000                     _TRISB	set	3987
   182   000000                     _LATE	set	3981
   183   000000                     _LATD	set	3980
   184   000000                     _LATC	set	3979
   185   000000                     _LATB	set	3978
   186                           
   187                           ; #config settings
   188                           
   189                           	psect	cinit
   190   001A50                     __pcinit:
   191                           	callstack 0
   192   001A50                     start_initialization:
   193                           	callstack 0
   194   001A50                     __initialization:
   195                           	callstack 0
   196                           
   197                           ; Initialize objects allocated to COMRAM (15 bytes)
   198                           ; load TBLPTR registers with __pidataCOMRAM
   199   001A50  0EFA               	movlw	low __pidataCOMRAM
   200   001A52  6EF6               	movwf	tblptrl,c
   201   001A54  0E1A               	movlw	high __pidataCOMRAM
   202   001A56  6EF7               	movwf	tblptrh,c
   203   001A58  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   204   001A5A  6EF8               	movwf	tblptru,c
   205   001A5C  EE00  F043         	lfsr	0,__pdataCOMRAM
   206   001A60  EE10 F00F          	lfsr	1,15
   207   001A64                     copy_data0:
   208   001A64  0009               	tblrd		*+
   209   001A66  CFF5 FFEE          	movff	tablat,postinc0
   210   001A6A  50E5               	movf	postdec1,w,c
   211   001A6C  50E1               	movf	fsr1l,w,c
   212   001A6E  E1FA               	bnz	copy_data0
   213                           
   214                           ; Clear objects allocated to COMRAM (41 bytes)
   215   001A70  EE00  F001         	lfsr	0,__pbssCOMRAM
   216   001A74  0E29               	movlw	41
   217   001A76                     clear_0:
   218   001A76  6AEE               	clrf	postinc0,c
   219   001A78  06E8               	decf	wreg,f,c
   220   001A7A  E1FD               	bnz	clear_0
   221   001A7C                     end_of_initialization:
   222                           	callstack 0
   223   001A7C                     __end_of__initialization:
   224                           	callstack 0
   225   001A7C  0100               	movlb	0
   226   001A7E  EFC3  F00C         	goto	_main	;jump to C main() function
   227                           
   228                           	psect	bssCOMRAM
   229   000001                     __pbssCOMRAM:
   230                           	callstack 0
   231   000001                     _INT2_InterruptHandler:
   232                           	callstack 0
   233   000001                     	ds	2
   234   000003                     _INT1_InterruptHandler:
   235                           	callstack 0
   236   000003                     	ds	2
   237   000005                     _INT0_InterruptHandler:
   238                           	callstack 0
   239   000005                     	ds	2
   240   000007                     _counter@ecu_seven_seg$F666:
   241                           	callstack 0
   242   000007                     	ds	1
   243   000008                     relay_toggle@F2936:
   244                           	callstack 0
   245   000008                     	ds	1
   246   000009                     relay_turn_on@F2928:
   247                           	callstack 0
   248   000009                     	ds	1
   249   00000A                     relay_turn_off@F2920:
   250                           	callstack 0
   251   00000A                     	ds	1
   252   00000B                     relay_init@F2912:
   253                           	callstack 0
   254   00000B                     	ds	1
   255   00000C                     led_toggle@F2933:
   256                           	callstack 0
   257   00000C                     	ds	1
   258   00000D                     led_turn_on@F2926:
   259                           	callstack 0
   260   00000D                     	ds	1
   261   00000E                     led_turn_off@F2919:
   262                           	callstack 0
   263   00000E                     	ds	1
   264   00000F                     led_initialize@F2912:
   265                           	callstack 0
   266   00000F                     	ds	1
   267   000010                     _disable_logic:
   268                           	callstack 0
   269   000010                     	ds	1
   270   000011                     _enable_logic:
   271                           	callstack 0
   272   000011                     	ds	1
   273   000012                     _counter:
   274                           	callstack 0
   275   000012                     	ds	1
   276   000013                     button_read_state@F2923:
   277                           	callstack 0
   278   000013                     	ds	1
   279   000014                     button_init@F2912:
   280                           	callstack 0
   281   000014                     	ds	1
   282   000015                     _pins:
   283                           	callstack 0
   284   000015                     	ds	4
   285   000019                     _column_pins:
   286                           	callstack 0
   287   000019                     	ds	4
   288   00001D                     _row_pins:
   289                           	callstack 0
   290   00001D                     	ds	4
   291   000021                     _data_pins:
   292                           	callstack 0
   293   000021                     	ds	4
   294   000025                     _read:
   295                           	callstack 0
   296   000025                     	ds	1
   297   000026                     _pin_2:
   298                           	callstack 0
   299   000026                     	ds	1
   300   000027                     _pin_1:
   301                           	callstack 0
   302   000027                     	ds	1
   303   000028                     _rs_pin:
   304                           	callstack 0
   305   000028                     	ds	1
   306   000029                     _enable_pin:
   307                           	callstack 0
   308   000029                     	ds	1
   309                           
   310                           	psect	dataCOMRAM
   311   000043                     __pdataCOMRAM:
   312                           	callstack 0
   313   000043                     _keypad:
   314                           	callstack 0
   315   000043                     	ds	9
   316   00004C                     _lcd:
   317                           	callstack 0
   318   00004C                     	ds	6
   319                           
   320                           	psect	cstackCOMRAM
   321   00002A                     __pcstackCOMRAM:
   322                           	callstack 0
   323   00002A                     lcd_assign_pins@lcd:
   324                           	callstack 0
   325   00002A                     assign_pins@ecu_keypad$F381@keypad:
   326                           	callstack 0
   327   00002A                     gpio_pin_direction_initialize@_pin_config:
   328                           	callstack 0
   329   00002A                     gpio_pin_write_logic@_pin_config:
   330                           	callstack 0
   331   00002A                     gpio_pin_read_logic@_pin_config:
   332                           	callstack 0
   333   00002A                     clear_4th@num:
   334                           	callstack 0
   335                           
   336                           ; 1 bytes @ 0x0
   337   00002A                     	ds	1
   338   00002B                     ??_gpio_pin_direction_initialize:
   339   00002B                     ??_lcd_assign_pins:
   340   00002B                     ??_assign_pins@ecu_keypad$F381:
   341   00002B                     gpio_pin_write_logic@logic:
   342                           	callstack 0
   343   00002B                     gpio_pin_read_logic@logic:
   344                           	callstack 0
   345   00002B                     set_1st_clear_4th@num:
   346                           	callstack 0
   347                           
   348                           ; 1 bytes @ 0x1
   349   00002B                     	ds	1
   350   00002C                     ??_gpio_pin_read_logic:
   351   00002C                     ??_gpio_pin_write_logic:
   352   00002C                     lcd_assign_pins@ret:
   353                           	callstack 0
   354   00002C                     set_1st_clear_4th@buff:
   355                           	callstack 0
   356                           
   357                           ; 1 bytes @ 0x2
   358   00002C                     	ds	1
   359   00002D                     lcd_assign_pins@counter:
   360                           	callstack 0
   361   00002D                     assign_pins@ecu_keypad$F381@ret_val:
   362                           	callstack 0
   363                           
   364                           ; 1 bytes @ 0x3
   365   00002D                     	ds	4
   366   000031                     gpio_pin_direction_initialize@ret_State:
   367                           	callstack 0
   368   000031                     gpio_pin_read_logic@ret_State:
   369                           	callstack 0
   370                           
   371                           ; 1 bytes @ 0x7
   372   000031                     	ds	1
   373   000032                     gpio_pin_write_logic@ret_State:
   374                           	callstack 0
   375                           
   376                           ; 1 bytes @ 0x8
   377   000032                     	ds	1
   378   000033                     lcd_send_enable_signal@ret:
   379                           	callstack 0
   380   000033                     keypad_read_button@keypad:
   381                           	callstack 0
   382   000033                     gpio_pin_initialize@_pin_config:
   383                           	callstack 0
   384                           
   385                           ; 1 bytes @ 0x9
   386   000033                     	ds	1
   387   000034                     ??_lcd_send_bits:
   388   000034                     keypad_read_button@read:
   389                           	callstack 0
   390   000034                     gpio_pin_initialize@ret_State:
   391                           	callstack 0
   392                           
   393                           ; 1 bytes @ 0xA
   394   000034                     	ds	1
   395   000035                     ??_keypad_read_button:
   396   000035                     keypad_init@keypad:
   397                           	callstack 0
   398                           
   399                           ; 1 bytes @ 0xB
   400   000035                     	ds	1
   401   000036                     lcd_send_bits@bits:
   402                           	callstack 0
   403   000036                     keypad_init@ret_val:
   404                           	callstack 0
   405   000036                     keypad_read_button@logic_read:
   406                           	callstack 0
   407                           
   408                           ; 1 bytes @ 0xC
   409   000036                     	ds	1
   410   000037                     lcd_send_bits@ret:
   411                           	callstack 0
   412   000037                     keypad_read_button@ret_val:
   413                           	callstack 0
   414                           
   415                           ; 1 bytes @ 0xD
   416   000037                     	ds	1
   417   000038                     lcd_send_bits@counter:
   418                           	callstack 0
   419   000038                     keypad_read_button@column_counter:
   420                           	callstack 0
   421                           
   422                           ; 1 bytes @ 0xE
   423   000038                     	ds	1
   424   000039                     lcd_send_command@lcd:
   425                           	callstack 0
   426   000039                     lcd_send_data@lcd:
   427                           	callstack 0
   428   000039                     keypad_read_button@row_counter:
   429                           	callstack 0
   430                           
   431                           ; 1 bytes @ 0xF
   432   000039                     	ds	1
   433   00003A                     lcd_send_command@command:
   434                           	callstack 0
   435   00003A                     lcd_send_data@data:
   436                           	callstack 0
   437                           
   438                           ; 1 bytes @ 0x10
   439   00003A                     	ds	1
   440   00003B                     lcd_send_command@ret:
   441                           	callstack 0
   442   00003B                     lcd_send_data@ret:
   443                           	callstack 0
   444                           
   445                           ; 1 bytes @ 0x11
   446   00003B                     	ds	1
   447   00003C                     lcd_init@lcd:
   448                           	callstack 0
   449                           
   450                           ; 1 bytes @ 0x12
   451   00003C                     	ds	1
   452   00003D                     ??_lcd_init:
   453                           
   454                           ; 1 bytes @ 0x13
   455   00003D                     	ds	1
   456   00003E                     lcd_init@counter:
   457                           	callstack 0
   458                           
   459                           ; 1 bytes @ 0x14
   460   00003E                     	ds	1
   461   00003F                     lcd_init@ret:
   462                           	callstack 0
   463                           
   464                           ; 1 bytes @ 0x15
   465   00003F                     	ds	1
   466   000040                     ecu_layer_initialize@ret_val:
   467                           	callstack 0
   468                           
   469                           ; 1 bytes @ 0x16
   470   000040                     	ds	1
   471   000041                     ??_main:
   472                           
   473                           ; 1 bytes @ 0x17
   474   000041                     	ds	2
   475                           
   476 ;;
   477 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   478 ;;
   479 ;; *************** function _main *****************
   480 ;; Defined at:
   481 ;;		line 23 in file "application.c"
   482 ;; Parameters:    Size  Location     Type
   483 ;;		None
   484 ;; Auto vars:     Size  Location     Type
   485 ;;		None
   486 ;; Return value:  Size  Location     Type
   487 ;;                  2  661[None  ] int 
   488 ;; Registers used:
   489 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   490 ;; Tracked objects:
   491 ;;		On entry : 0/0
   492 ;;		On exit  : 0/0
   493 ;;		Unchanged: 0/0
   494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   497 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   498 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   499 ;;Total ram usage:        2 bytes
   500 ;; Hardware stack levels required when called: 7
   501 ;; This function calls:
   502 ;;		_app_init
   503 ;;		_keypad_read_button
   504 ;;		_lcd_send_data
   505 ;;		_set_1st_clear_4th
   506 ;; This function is called by:
   507 ;;		Startup code after reset
   508 ;; This function uses a non-reentrant model
   509 ;;
   510                           
   511                           	psect	text0
   512   001986                     __ptext0:
   513                           	callstack 0
   514   001986                     _main:
   515                           	callstack 24
   516   001986                     
   517                           ;application.c: 25:     app_init();
   518   001986  EC89  F00D         	call	_app_init	;wreg free
   519   00198A                     l3457:
   520                           
   521                           ;application.c: 28:     {;application.c: 29:         ret_val = keypad_read_button(&keypa
      +                          d, &read);
   522   00198A  0E43               	movlw	low _keypad
   523   00198C  6E33               	movwf	keypad_read_button@keypad^0,c
   524   00198E  0E25               	movlw	low _read
   525   001990  6E34               	movwf	keypad_read_button@read^0,c
   526   001992  EC5F  F00B         	call	_keypad_read_button	;wreg free
   527   001996  6E52               	movwf	_ret_val^0,c
   528   001998                     
   529                           ;application.c: 31:         if(read)
   530   001998  5025               	movf	_read^0,w,c
   531   00199A  B4D8               	btfsc	status,2,c
   532   00199C  EFD2  F00C         	goto	u2541
   533   0019A0  EFD4  F00C         	goto	u2540
   534   0019A4                     u2541:
   535   0019A4  EFC5  F00C         	goto	l3457
   536   0019A8                     u2540:
   537   0019A8                     
   538                           ;application.c: 32:         {;application.c: 33:             read = set_1st_clear_4th(re
      +                          ad);
   539   0019A8  5025               	movf	_read^0,w,c
   540   0019AA  EC75  F00D         	call	_set_1st_clear_4th
   541   0019AE  6E25               	movwf	_read^0,c
   542   0019B0                     
   543                           ;application.c: 34:             ret_val = lcd_send_data(&lcd, read);
   544   0019B0  0E4C               	movlw	low _lcd
   545   0019B2  6E39               	movwf	lcd_send_data@lcd^0,c
   546   0019B4  C025  F03A         	movff	_read,lcd_send_data@data
   547   0019B8  ECF0  F00C         	call	_lcd_send_data	;wreg free
   548   0019BC  6E52               	movwf	_ret_val^0,c
   549   0019BE                     
   550                           ;application.c: 35:             read = 0;
   551   0019BE  0E00               	movlw	0
   552   0019C0  6E25               	movwf	_read^0,c
   553   0019C2                     
   554                           ;application.c: 36:             _delay((unsigned long)((250)*(4000000/4000.0)));
   555   0019C2  0E02               	movlw	2
   556   0019C4  6E42               	movwf	(??_main+1)^0,c
   557   0019C6  0E45               	movlw	69
   558   0019C8  6E41               	movwf	??_main^0,c
   559   0019CA  0EAA               	movlw	170
   560   0019CC                     u2557:
   561   0019CC  2EE8               	decfsz	wreg,f,c
   562   0019CE  D7FE               	bra	u2557
   563   0019D0  2E41               	decfsz	??_main^0,f,c
   564   0019D2  D7FC               	bra	u2557
   565   0019D4  2E42               	decfsz	(??_main+1)^0,f,c
   566   0019D6  D7FA               	bra	u2557
   567   0019D8  EFC5  F00C         	goto	l3457
   568   0019DC  EF00  F000         	goto	start
   569   0019E0                     __end_of_main:
   570                           	callstack 0
   571                           
   572 ;; *************** function _set_1st_clear_4th *****************
   573 ;; Defined at:
   574 ;;		line 42 in file "application.c"
   575 ;; Parameters:    Size  Location     Type
   576 ;;  num             1    wreg     unsigned char 
   577 ;; Auto vars:     Size  Location     Type
   578 ;;  num             1    1[COMRAM] unsigned char 
   579 ;;  buff            1    2[COMRAM] unsigned char 
   580 ;; Return value:  Size  Location     Type
   581 ;;                  1    wreg      unsigned char 
   582 ;; Registers used:
   583 ;;		wreg, status,2, status,0, cstack
   584 ;; Tracked objects:
   585 ;;		On entry : 0/0
   586 ;;		On exit  : 0/0
   587 ;;		Unchanged: 0/0
   588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   590 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   592 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   593 ;;Total ram usage:        2 bytes
   594 ;; Hardware stack levels used: 1
   595 ;; Hardware stack levels required when called: 1
   596 ;; This function calls:
   597 ;;		_clear_4th
   598 ;; This function is called by:
   599 ;;		_main
   600 ;; This function uses a non-reentrant model
   601 ;;
   602                           
   603                           	psect	text1
   604   001AEA                     __ptext1:
   605                           	callstack 0
   606   001AEA                     _set_1st_clear_4th:
   607                           	callstack 29
   608                           
   609                           ;incstack = 0
   610                           ;set_1st_clear_4th@num stored from wreg
   611   001AEA  6E2B               	movwf	set_1st_clear_4th@num^0,c
   612   001AEC                     
   613                           ;application.c: 42: uint8 set_1st_clear_4th(uint8 num);application.c: 43: {;application.
      +                          c: 44:     num |= 0x01;
   614   001AEC  802B               	bsf	set_1st_clear_4th@num^0,0,c
   615   001AEE                     
   616                           ;application.c: 45:     uint8 buff = clear_4th(num);
   617   001AEE  502B               	movf	set_1st_clear_4th@num^0,w,c
   618   001AF0  EC85  F00D         	call	_clear_4th
   619   001AF4  6E2C               	movwf	set_1st_clear_4th@buff^0,c
   620   001AF6                     
   621                           ;application.c: 46:     return buff;
   622   001AF6  502C               	movf	set_1st_clear_4th@buff^0,w,c
   623   001AF8  0012               	return		;funcret
   624   001AFA                     __end_of_set_1st_clear_4th:
   625                           	callstack 0
   626                           
   627 ;; *************** function _clear_4th *****************
   628 ;; Defined at:
   629 ;;		line 49 in file "application.c"
   630 ;; Parameters:    Size  Location     Type
   631 ;;  num             1    wreg     unsigned char 
   632 ;; Auto vars:     Size  Location     Type
   633 ;;  num             1    0[COMRAM] unsigned char 
   634 ;; Return value:  Size  Location     Type
   635 ;;                  1    wreg      unsigned char 
   636 ;; Registers used:
   637 ;;		wreg, status,2, status,0
   638 ;; Tracked objects:
   639 ;;		On entry : 0/0
   640 ;;		On exit  : 0/0
   641 ;;		Unchanged: 0/0
   642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   644 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   646 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   647 ;;Total ram usage:        1 bytes
   648 ;; Hardware stack levels used: 1
   649 ;; This function calls:
   650 ;;		Nothing
   651 ;; This function is called by:
   652 ;;		_set_1st_clear_4th
   653 ;; This function uses a non-reentrant model
   654 ;;
   655                           
   656                           	psect	text2
   657   001B0A                     __ptext2:
   658                           	callstack 0
   659   001B0A                     _clear_4th:
   660                           	callstack 29
   661                           
   662                           ;incstack = 0
   663                           ;clear_4th@num stored from wreg
   664   001B0A  6E2A               	movwf	clear_4th@num^0,c
   665   001B0C                     
   666                           ;application.c: 49: uint8 clear_4th(uint8 num);application.c: 50: {;application.c: 51:  
      +                             num &= ~(0x01 << 3);
   667   001B0C  962A               	bcf	clear_4th@num^0,3,c
   668   001B0E                     
   669                           ;application.c: 52:     return num;
   670   001B0E  502A               	movf	clear_4th@num^0,w,c
   671   001B10  0012               	return		;funcret
   672   001B12                     __end_of_clear_4th:
   673                           	callstack 0
   674                           
   675 ;; *************** function _lcd_send_data *****************
   676 ;; Defined at:
   677 ;;		line 64 in file "ECUAL/Chr_LCD/ecu_chr_lcd.c"
   678 ;; Parameters:    Size  Location     Type
   679 ;;  lcd             1   15[COMRAM] PTR const struct lcd
   680 ;;		 -> lcd(6), 
   681 ;;  data            1   16[COMRAM] unsigned char 
   682 ;; Auto vars:     Size  Location     Type
   683 ;;  ret             1   17[COMRAM] enum E2813
   684 ;; Return value:  Size  Location     Type
   685 ;;                  1    wreg      enum E2813
   686 ;; Registers used:
   687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   688 ;; Tracked objects:
   689 ;;		On entry : 0/0
   690 ;;		On exit  : 0/0
   691 ;;		Unchanged: 0/0
   692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   693 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   694 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   696 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   697 ;;Total ram usage:        3 bytes
   698 ;; Hardware stack levels used: 1
   699 ;; Hardware stack levels required when called: 3
   700 ;; This function calls:
   701 ;;		_gpio_pin_write_logic
   702 ;;		_lcd_assign_pins
   703 ;;		_lcd_send_bits
   704 ;; This function is called by:
   705 ;;		_main
   706 ;;		_lcd_send_data_pos
   707 ;;		_lcd_send_string
   708 ;;		_lcd_send_string_pos
   709 ;;		_lcd_send_custom_char
   710 ;; This function uses a non-reentrant model
   711 ;;
   712                           
   713                           	psect	text3
   714   0019E0                     __ptext3:
   715                           	callstack 0
   716   0019E0                     _lcd_send_data:
   717                           	callstack 27
   718   0019E0                     
   719                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 64: Std_ReturnType lcd_send_data(const chr_lcd_t *lcd, uin
      +                          t8 data);ECUAL/Chr_LCD/ecu_chr_lcd.c: 65: {;ECUAL/Chr_LCD/ecu_chr_lcd.c: 66:     Std_Ret
      +                          urnType ret = E_NOT_OK;
   720   0019E0  0E00               	movlw	0
   721   0019E2  6E3B               	movwf	lcd_send_data@ret^0,c
   722                           
   723                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 68:     if(lcd)
   724   0019E4  5039               	movf	lcd_send_data@lcd^0,w,c
   725   0019E6  B4D8               	btfsc	status,2,c
   726   0019E8  EFF8  F00C         	goto	u1951
   727   0019EC  EFFA  F00C         	goto	u1950
   728   0019F0                     u1951:
   729   0019F0  EF0A  F00D         	goto	l2927
   730   0019F4                     u1950:
   731   0019F4                     
   732                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 71:         ret = lcd_assign_pins(lcd);
   733   0019F4  C039  F02A         	movff	lcd_send_data@lcd,lcd_assign_pins@lcd
   734   0019F8  EC58  F00A         	call	_lcd_assign_pins	;wreg free
   735   0019FC  6E3B               	movwf	lcd_send_data@ret^0,c
   736   0019FE                     
   737                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 72:         ret &= gpio_pin_write_logic(&rs_pin, GPIO_HIGH
      +                          );
   738   0019FE  0E28               	movlw	low _rs_pin
   739   001A00  6E2A               	movwf	gpio_pin_write_logic@_pin_config^0,c
   740   001A02  0E01               	movlw	1
   741   001A04  6E2B               	movwf	gpio_pin_write_logic@logic^0,c
   742   001A06  EC18  F008         	call	_gpio_pin_write_logic	;wreg free
   743   001A0A  163B               	andwf	lcd_send_data@ret^0,f,c
   744   001A0C                     
   745                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 73:         ret &= lcd_send_bits(data);
   746   001A0C  503A               	movf	lcd_send_data@data^0,w,c
   747   001A0E  EC30  F00C         	call	_lcd_send_bits
   748   001A12  163B               	andwf	lcd_send_data@ret^0,f,c
   749   001A14                     l2927:
   750                           
   751                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 76:     return ret;
   752   001A14  503B               	movf	lcd_send_data@ret^0,w,c
   753   001A16  0012               	return		;funcret
   754   001A18                     __end_of_lcd_send_data:
   755                           	callstack 0
   756                           
   757 ;; *************** function _keypad_read_button *****************
   758 ;; Defined at:
   759 ;;		line 92 in file "ECUAL/Keypad/ecu_keypad.c"
   760 ;; Parameters:    Size  Location     Type
   761 ;;  keypad          1    9[COMRAM] const PTR const struct .
   762 ;;		 -> keypad(9), 
   763 ;;  read            1   10[COMRAM] PTR unsigned char 
   764 ;;		 -> read(1), 
   765 ;; Auto vars:     Size  Location     Type
   766 ;;  logic_read      1   12[COMRAM] enum E2838
   767 ;;  row_counter     1   15[COMRAM] unsigned char 
   768 ;;  column_count    1   14[COMRAM] unsigned char 
   769 ;;  ret_val         1   13[COMRAM] enum E2813
   770 ;; Return value:  Size  Location     Type
   771 ;;                  1    wreg      enum E2813
   772 ;; Registers used:
   773 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   774 ;; Tracked objects:
   775 ;;		On entry : 0/0
   776 ;;		On exit  : 0/0
   777 ;;		Unchanged: 0/0
   778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   779 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   780 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   781 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   782 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   783 ;;Total ram usage:        7 bytes
   784 ;; Hardware stack levels used: 1
   785 ;; Hardware stack levels required when called: 1
   786 ;; This function calls:
   787 ;;		_assign_pins@ecu_keypad$F381
   788 ;;		_gpio_pin_read_logic
   789 ;;		_gpio_pin_write_logic
   790 ;; This function is called by:
   791 ;;		_main
   792 ;; This function uses a non-reentrant model
   793 ;;
   794                           
   795                           	psect	text4
   796   0016BE                     __ptext4:
   797                           	callstack 0
   798   0016BE                     _keypad_read_button:
   799                           	callstack 29
   800   0016BE                     
   801                           ;ECUAL/Keypad/ecu_keypad.c: 95:     uint8 row_counter, column_counter;;ECUAL/Keypad/ecu_
      +                          keypad.c: 97:     if(((void*)0) == keypad || ((void*)0) == read)
   802   0016BE  5033               	movf	keypad_read_button@keypad^0,w,c
   803   0016C0  B4D8               	btfsc	status,2,c
   804   0016C2  EF65  F00B         	goto	u1971
   805   0016C6  EF67  F00B         	goto	u1970
   806   0016CA                     u1971:
   807   0016CA  EF6F  F00B         	goto	l2965
   808   0016CE                     u1970:
   809   0016CE  5034               	movf	keypad_read_button@read^0,w,c
   810   0016D0  A4D8               	btfss	status,2,c
   811   0016D2  EF6D  F00B         	goto	u1981
   812   0016D6  EF6F  F00B         	goto	u1980
   813   0016DA                     u1981:
   814   0016DA  EF73  F00B         	goto	l2967
   815   0016DE                     u1980:
   816   0016DE                     l2965:
   817                           
   818                           ;ECUAL/Keypad/ecu_keypad.c: 98:     {;ECUAL/Keypad/ecu_keypad.c: 99:         ret_val = E
      +                          _NOT_OK;
   819   0016DE  0E00               	movlw	0
   820   0016E0  6E37               	movwf	keypad_read_button@ret_val^0,c
   821                           
   822                           ;ECUAL/Keypad/ecu_keypad.c: 100:     }
   823   0016E2  EFC8  F00B         	goto	l3001
   824   0016E6                     l2967:
   825                           
   826                           ;ECUAL/Keypad/ecu_keypad.c: 102:     {;ECUAL/Keypad/ecu_keypad.c: 103:         pin_logic
      +                          _t logic_read;;ECUAL/Keypad/ecu_keypad.c: 104:         ret_val = assign_pins(keypad);
   827   0016E6  C033  F02A         	movff	keypad_read_button@keypad,assign_pins@ecu_keypad$F381@keypad
   828   0016EA  ECF4  F008         	call	_assign_pins@ecu_keypad$F381	;wreg free
   829   0016EE  6E37               	movwf	keypad_read_button@ret_val^0,c
   830   0016F0                     
   831                           ;ECUAL/Keypad/ecu_keypad.c: 105:         if (E_OK == ret_val)
   832   0016F0  0437               	decf	keypad_read_button@ret_val^0,w,c
   833   0016F2  A4D8               	btfss	status,2,c
   834   0016F4  EF7E  F00B         	goto	u1991
   835   0016F8  EF80  F00B         	goto	u1990
   836   0016FC                     u1991:
   837   0016FC  EFC8  F00B         	goto	l3001
   838   001700                     u1990:
   839   001700                     
   840                           ;ECUAL/Keypad/ecu_keypad.c: 106:         {;ECUAL/Keypad/ecu_keypad.c: 107:             f
      +                          or (row_counter = 0; row_counter < 4; row_counter++)
   841   001700  0E00               	movlw	0
   842   001702  6E39               	movwf	keypad_read_button@row_counter^0,c
   843   001704                     l2977:
   844                           
   845                           ;ECUAL/Keypad/ecu_keypad.c: 108:             {;ECUAL/Keypad/ecu_keypad.c: 109:          
      +                                 ret_val &= gpio_pin_write_logic(&row_pins[row_counter], enable_logic);
   846   001704  5039               	movf	keypad_read_button@row_counter^0,w,c
   847   001706  0F1D               	addlw	low _row_pins
   848   001708  6E2A               	movwf	gpio_pin_write_logic@_pin_config^0,c
   849   00170A  C011  F02B         	movff	_enable_logic,gpio_pin_write_logic@logic
   850   00170E  EC18  F008         	call	_gpio_pin_write_logic	;wreg free
   851   001712  1637               	andwf	keypad_read_button@ret_val^0,f,c
   852   001714                     
   853                           ;ECUAL/Keypad/ecu_keypad.c: 110:                 for (column_counter = 0; column_counter
      +                           < 4; column_counter++)
   854   001714  0E00               	movlw	0
   855   001716  6E38               	movwf	keypad_read_button@column_counter^0,c
   856   001718                     l2985:
   857                           
   858                           ;ECUAL/Keypad/ecu_keypad.c: 111:                 {;ECUAL/Keypad/ecu_keypad.c: 112:      
      +                                         ret_val &= gpio_pin_read_logic(&column_pins[column_counter], &logic_read)
      +                          ;
   859   001718  5038               	movf	keypad_read_button@column_counter^0,w,c
   860   00171A  0F19               	addlw	low _column_pins
   861   00171C  6E2A               	movwf	gpio_pin_read_logic@_pin_config^0,c
   862   00171E  0E36               	movlw	low keypad_read_button@logic_read
   863   001720  6E2B               	movwf	gpio_pin_read_logic@logic^0,c
   864   001722  ECCA  F00B         	call	_gpio_pin_read_logic	;wreg free
   865   001726  1637               	andwf	keypad_read_button@ret_val^0,f,c
   866   001728                     
   867                           ;ECUAL/Keypad/ecu_keypad.c: 113:                     if (logic_read == enable_logic)
   868   001728  5011               	movf	_enable_logic^0,w,c
   869   00172A  1836               	xorwf	keypad_read_button@logic_read^0,w,c
   870   00172C  A4D8               	btfss	status,2,c
   871   00172E  EF9B  F00B         	goto	u2001
   872   001732  EF9D  F00B         	goto	u2000
   873   001736                     u2001:
   874   001736  EFAE  F00B         	goto	l2991
   875   00173A                     u2000:
   876   00173A                     
   877                           ;ECUAL/Keypad/ecu_keypad.c: 114:                         *read = keypad_buttons[row_coun
      +                          ter][column_counter];
   878   00173A  5039               	movf	keypad_read_button@row_counter^0,w,c
   879   00173C  0D04               	mullw	4
   880   00173E  50F3               	movf	243,w,c
   881   001740  0F01               	addlw	low _keypad_buttons
   882   001742  2438               	addwf	keypad_read_button@column_counter^0,w,c
   883   001744  6E35               	movwf	??_keypad_read_button^0,c
   884   001746  C035  FFF6         	movff	??_keypad_read_button,tblptrl
   885   00174A                     	if	1	;There is more than 1 active tblptr byte
   886   00174A  0E10               	movlw	high __smallconst
   887   00174C  6EF7               	movwf	tblptrh,c
   888   00174E                     	endif
   889   00174E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
   890   00174E  6AF8               	clrf	tblptru,c
   891   001750                     	endif
   892   001750                     	if	0	;tblptru may be non-zero
   893   001750                     	endif
   894   001750  5034               	movf	keypad_read_button@read^0,w,c
   895   001752  6ED9               	movwf	fsr2l,c
   896   001754  6ADA               	clrf	fsr2h,c
   897   001756  0008               	tblrd		*
   898   001758  CFF5 FFDF          	movff	tablat,indf2
   899   00175C                     l2991:
   900                           
   901                           ;ECUAL/Keypad/ecu_keypad.c: 115:                 }
   902   00175C  2A38               	incf	keypad_read_button@column_counter^0,f,c
   903   00175E  0E03               	movlw	3
   904   001760  6438               	cpfsgt	keypad_read_button@column_counter^0,c
   905   001762  EFB5  F00B         	goto	u2011
   906   001766  EFB7  F00B         	goto	u2010
   907   00176A                     u2011:
   908   00176A  EF8C  F00B         	goto	l2985
   909   00176E                     u2010:
   910   00176E                     
   911                           ;ECUAL/Keypad/ecu_keypad.c: 116:                 ret_val &= gpio_pin_write_logic(&row_pi
      +                          ns[row_counter], disable_logic);
   912   00176E  5039               	movf	keypad_read_button@row_counter^0,w,c
   913   001770  0F1D               	addlw	low _row_pins
   914   001772  6E2A               	movwf	gpio_pin_write_logic@_pin_config^0,c
   915   001774  C010  F02B         	movff	_disable_logic,gpio_pin_write_logic@logic
   916   001778  EC18  F008         	call	_gpio_pin_write_logic	;wreg free
   917   00177C  1637               	andwf	keypad_read_button@ret_val^0,f,c
   918   00177E                     
   919                           ;ECUAL/Keypad/ecu_keypad.c: 117:             }
   920   00177E  2A39               	incf	keypad_read_button@row_counter^0,f,c
   921   001780  0E03               	movlw	3
   922   001782  6439               	cpfsgt	keypad_read_button@row_counter^0,c
   923   001784  EFC6  F00B         	goto	u2021
   924   001788  EFC8  F00B         	goto	u2020
   925   00178C                     u2021:
   926   00178C  EF82  F00B         	goto	l2977
   927   001790                     u2020:
   928   001790                     l3001:
   929                           
   930                           ;ECUAL/Keypad/ecu_keypad.c: 123:     return ret_val;
   931   001790  5037               	movf	keypad_read_button@ret_val^0,w,c
   932   001792  0012               	return		;funcret
   933   001794                     __end_of_keypad_read_button:
   934                           	callstack 0
   935                           
   936 ;; *************** function _gpio_pin_read_logic *****************
   937 ;; Defined at:
   938 ;;		line 97 in file "MCAL/GPIO/hal_gpio.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;  _pin_config     1    0[COMRAM] PTR const struct .
   941 ;;		 -> column_pins(4), button_read_state@pin(1), 
   942 ;;  logic           1    1[COMRAM] PTR enum E2838
   943 ;;		 -> keypad_read_button@logic_read(1), button_read_state@logic(1), 
   944 ;; Auto vars:     Size  Location     Type
   945 ;;  ret_State       1    7[COMRAM] enum E2813
   946 ;; Return value:  Size  Location     Type
   947 ;;                  1    wreg      enum E2813
   948 ;; Registers used:
   949 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
   950 ;; Tracked objects:
   951 ;;		On entry : 0/0
   952 ;;		On exit  : 0/0
   953 ;;		Unchanged: 0/0
   954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   955 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   956 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   957 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   958 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   959 ;;Total ram usage:        8 bytes
   960 ;; Hardware stack levels used: 1
   961 ;; This function calls:
   962 ;;		Nothing
   963 ;; This function is called by:
   964 ;;		_keypad_read_button
   965 ;;		_button_read_state
   966 ;; This function uses a non-reentrant model
   967 ;;
   968                           
   969                           	psect	text5
   970   001794                     __ptext5:
   971                           	callstack 0
   972   001794                     _gpio_pin_read_logic:
   973                           	callstack 29
   974   001794                     
   975                           ;MCAL/GPIO/hal_gpio.c: 97: Std_ReturnType gpio_pin_read_logic (const pin_config_t *_pin_
      +                          config, pin_logic_t *logic);MCAL/GPIO/hal_gpio.c: 98: {;MCAL/GPIO/hal_gpio.c: 99:     St
      +                          d_ReturnType ret_State = E_OK;
   976   001794  0E01               	movlw	1
   977   001796  6E31               	movwf	gpio_pin_read_logic@ret_State^0,c
   978                           
   979                           ;MCAL/GPIO/hal_gpio.c: 101:     if (((void*)0) == _pin_config || ((void*)0) == logic || 
      +                          _pin_config->port_index > PORTE_INDEX || _pin_config->pin_index > PIN7)
   980   001798  502A               	movf	gpio_pin_read_logic@_pin_config^0,w,c
   981   00179A  B4D8               	btfsc	status,2,c
   982   00179C  EFD2  F00B         	goto	u1901
   983   0017A0  EFD4  F00B         	goto	u1900
   984   0017A4                     u1901:
   985   0017A4  EFFA  F00B         	goto	l2901
   986   0017A8                     u1900:
   987   0017A8  502B               	movf	gpio_pin_read_logic@logic^0,w,c
   988   0017AA  B4D8               	btfsc	status,2,c
   989   0017AC  EFDA  F00B         	goto	u1911
   990   0017B0  EFDC  F00B         	goto	u1910
   991   0017B4                     u1911:
   992   0017B4  EFFA  F00B         	goto	l2901
   993   0017B8                     u1910:
   994   0017B8  502A               	movf	gpio_pin_read_logic@_pin_config^0,w,c
   995   0017BA  6ED9               	movwf	fsr2l,c
   996   0017BC  6ADA               	clrf	fsr2h,c
   997   0017BE  50DF               	movf	223,w,c
   998   0017C0  0B07               	andlw	7
   999   0017C2  6E2C               	movwf	??_gpio_pin_read_logic^0,c
  1000   0017C4  0E05               	movlw	5
  1001   0017C6  602C               	cpfslt	??_gpio_pin_read_logic^0,c
  1002   0017C8  EFE8  F00B         	goto	u1921
  1003   0017CC  EFEA  F00B         	goto	u1920
  1004   0017D0                     u1921:
  1005   0017D0  EFFA  F00B         	goto	l2901
  1006   0017D4                     u1920:
  1007   0017D4  502A               	movf	gpio_pin_read_logic@_pin_config^0,w,c
  1008   0017D6  6ED9               	movwf	fsr2l,c
  1009   0017D8  6ADA               	clrf	fsr2h,c
  1010   0017DA  30DF               	rrcf	223,w,c
  1011   0017DC  32E8               	rrcf	wreg,f,c
  1012   0017DE  32E8               	rrcf	wreg,f,c
  1013   0017E0  0B07               	andlw	7
  1014   0017E2  6E2C               	movwf	??_gpio_pin_read_logic^0,c
  1015   0017E4  0E07               	movlw	7
  1016   0017E6  642C               	cpfsgt	??_gpio_pin_read_logic^0,c
  1017   0017E8  EFF8  F00B         	goto	u1931
  1018   0017EC  EFFA  F00B         	goto	u1930
  1019   0017F0                     u1931:
  1020   0017F0  EFFE  F00B         	goto	l2903
  1021   0017F4                     u1930:
  1022   0017F4                     l2901:
  1023                           
  1024                           ;MCAL/GPIO/hal_gpio.c: 102:     {;MCAL/GPIO/hal_gpio.c: 103:         ret_State = E_NOT_O
      +                          K;
  1025   0017F4  0E00               	movlw	0
  1026   0017F6  6E31               	movwf	gpio_pin_read_logic@ret_State^0,c
  1027                           
  1028                           ;MCAL/GPIO/hal_gpio.c: 104:     }
  1029   0017F8  EF2E  F00C         	goto	l2905
  1030   0017FC                     l2903:
  1031                           
  1032                           ;MCAL/GPIO/hal_gpio.c: 106:     {;MCAL/GPIO/hal_gpio.c: 107:         *logic = (((*port_r
      +                          egs[_pin_config->port_index]) >> (_pin_config->pin_index)) & 0x01);
  1033   0017FC  502B               	movf	gpio_pin_read_logic@logic^0,w,c
  1034   0017FE  6ED9               	movwf	fsr2l,c
  1035   001800  6ADA               	clrf	fsr2h,c
  1036   001802  502A               	movf	gpio_pin_read_logic@_pin_config^0,w,c
  1037   001804  6EE1               	movwf	fsr1l,c
  1038   001806  6AE2               	clrf	fsr1h,c
  1039   001808  30E7               	rrcf	231,w,c
  1040   00180A  32E8               	rrcf	wreg,f,c
  1041   00180C  32E8               	rrcf	wreg,f,c
  1042   00180E  0B07               	andlw	7
  1043   001810  6E2C               	movwf	??_gpio_pin_read_logic^0,c
  1044   001812  502A               	movf	gpio_pin_read_logic@_pin_config^0,w,c
  1045   001814  6EE1               	movwf	fsr1l,c
  1046   001816  6AE2               	clrf	fsr1h,c
  1047   001818  50E7               	movf	231,w,c
  1048   00181A  0B07               	andlw	7
  1049   00181C  0D02               	mullw	2
  1050   00181E  50F3               	movf	243,w,c
  1051   001820  0F11               	addlw	low _port_regs
  1052   001822  6E2D               	movwf	(??_gpio_pin_read_logic+1)^0,c
  1053   001824  C02D  FFF6         	movff	??_gpio_pin_read_logic+1,tblptrl
  1054   001828                     	if	1	;There is more than 1 active tblptr byte
  1055   001828  0E10               	movlw	high __smallconst
  1056   00182A  6EF7               	movwf	tblptrh,c
  1057   00182C                     	endif
  1058   00182C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1059   00182C  6AF8               	clrf	tblptru,c
  1060   00182E                     	endif
  1061   00182E                     	if	0	;tblptru may be non-zero
  1062   00182E                     	endif
  1063   00182E  0009               	tblrd		*+
  1064   001830  CFF5 F02E          	movff	tablat,??_gpio_pin_read_logic+2
  1065   001834  0009               	tblrd		*+
  1066   001836  CFF5 F02F          	movff	tablat,??_gpio_pin_read_logic+3
  1067   00183A  C02E  FFE1         	movff	??_gpio_pin_read_logic+2,fsr1l
  1068   00183E  C02F  FFE2         	movff	??_gpio_pin_read_logic+3,fsr1h
  1069   001842  50E7               	movf	indf1,w,c
  1070   001844  6E30               	movwf	(??_gpio_pin_read_logic+4)^0,c
  1071   001846  2A2C               	incf	??_gpio_pin_read_logic^0,f,c
  1072   001848  EF28  F00C         	goto	u1944
  1073   00184C                     u1945:
  1074   00184C  90D8               	bcf	status,0,c
  1075   00184E  3230               	rrcf	(??_gpio_pin_read_logic+4)^0,f,c
  1076   001850                     u1944:
  1077   001850  2E2C               	decfsz	??_gpio_pin_read_logic^0,f,c
  1078   001852  EF26  F00C         	goto	u1945
  1079   001856  5030               	movf	(??_gpio_pin_read_logic+4)^0,w,c
  1080   001858  0B01               	andlw	1
  1081   00185A  6EDF               	movwf	indf2,c
  1082   00185C                     l2905:
  1083                           
  1084                           ;MCAL/GPIO/hal_gpio.c: 110:     return ret_State;
  1085   00185C  5031               	movf	gpio_pin_read_logic@ret_State^0,w,c
  1086   00185E  0012               	return		;funcret
  1087   001860                     __end_of_gpio_pin_read_logic:
  1088                           	callstack 0
  1089                           
  1090 ;; *************** function _app_init *****************
  1091 ;; Defined at:
  1092 ;;		line 55 in file "application.c"
  1093 ;; Parameters:    Size  Location     Type
  1094 ;;		None
  1095 ;; Auto vars:     Size  Location     Type
  1096 ;;		None
  1097 ;; Return value:  Size  Location     Type
  1098 ;;                  1    wreg      void 
  1099 ;; Registers used:
  1100 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1101 ;; Tracked objects:
  1102 ;;		On entry : 0/0
  1103 ;;		On exit  : 0/0
  1104 ;;		Unchanged: 0/0
  1105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1110 ;;Total ram usage:        0 bytes
  1111 ;; Hardware stack levels used: 1
  1112 ;; Hardware stack levels required when called: 6
  1113 ;; This function calls:
  1114 ;;		_ecu_layer_initialize
  1115 ;; This function is called by:
  1116 ;;		_main
  1117 ;; This function uses a non-reentrant model
  1118 ;;
  1119                           
  1120                           	psect	text6
  1121   001B12                     __ptext6:
  1122                           	callstack 0
  1123   001B12                     _app_init:
  1124                           	callstack 24
  1125   001B12                     
  1126                           ;application.c: 57:     ret_val = ecu_layer_initialize();
  1127   001B12  EC6A  F00D         	call	_ecu_layer_initialize	;wreg free
  1128   001B16  6E52               	movwf	_ret_val^0,c
  1129   001B18  0012               	return		;funcret
  1130   001B1A                     __end_of_app_init:
  1131                           	callstack 0
  1132                           
  1133 ;; *************** function _ecu_layer_initialize *****************
  1134 ;; Defined at:
  1135 ;;		line 30 in file "ECUAL/ecu_layer_init.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;		None
  1138 ;; Auto vars:     Size  Location     Type
  1139 ;;  ret_val         1   22[COMRAM] enum E2813
  1140 ;; Return value:  Size  Location     Type
  1141 ;;                  1    wreg      enum E2813
  1142 ;; Registers used:
  1143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1144 ;; Tracked objects:
  1145 ;;		On entry : 0/0
  1146 ;;		On exit  : 0/0
  1147 ;;		Unchanged: 0/0
  1148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1150 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1152 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1153 ;;Total ram usage:        1 bytes
  1154 ;; Hardware stack levels used: 1
  1155 ;; Hardware stack levels required when called: 5
  1156 ;; This function calls:
  1157 ;;		_keypad_init
  1158 ;;		_lcd_init
  1159 ;; This function is called by:
  1160 ;;		_app_init
  1161 ;; This function uses a non-reentrant model
  1162 ;;
  1163                           
  1164                           	psect	text7
  1165   001AD4                     __ptext7:
  1166                           	callstack 0
  1167   001AD4                     _ecu_layer_initialize:
  1168                           	callstack 24
  1169   001AD4  0E43               	movlw	low _keypad
  1170   001AD6  6E35               	movwf	keypad_init@keypad^0,c
  1171   001AD8  EC7E  F00C         	call	_keypad_init	;wreg free
  1172   001ADC                     
  1173                           ;ECUAL/ecu_layer_init.c: 34:     ret_val = lcd_init(&lcd);
  1174   001ADC  0E4C               	movlw	low _lcd
  1175   001ADE  6E3C               	movwf	lcd_init@lcd^0,c
  1176   001AE0  ECE2  F00A         	call	_lcd_init	;wreg free
  1177   001AE4  6E40               	movwf	ecu_layer_initialize@ret_val^0,c
  1178                           
  1179                           ;ECUAL/ecu_layer_init.c: 36:     return ret_val;
  1180   001AE6  5040               	movf	ecu_layer_initialize@ret_val^0,w,c
  1181   001AE8  0012               	return		;funcret
  1182   001AEA                     __end_of_ecu_layer_initialize:
  1183                           	callstack 0
  1184                           
  1185 ;; *************** function _lcd_init *****************
  1186 ;; Defined at:
  1187 ;;		line 11 in file "ECUAL/Chr_LCD/ecu_chr_lcd.c"
  1188 ;; Parameters:    Size  Location     Type
  1189 ;;  lcd             1   18[COMRAM] PTR const struct lcd
  1190 ;;		 -> lcd(6), 
  1191 ;; Auto vars:     Size  Location     Type
  1192 ;;  counter         1   20[COMRAM] unsigned char 
  1193 ;;  ret             1   21[COMRAM] enum E2813
  1194 ;; Return value:  Size  Location     Type
  1195 ;;                  1    wreg      enum E2813
  1196 ;; Registers used:
  1197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 0/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1203 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1204 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1205 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1206 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1207 ;;Total ram usage:        4 bytes
  1208 ;; Hardware stack levels used: 1
  1209 ;; Hardware stack levels required when called: 4
  1210 ;; This function calls:
  1211 ;;		_gpio_pin_initialize
  1212 ;;		_lcd_assign_pins
  1213 ;;		_lcd_send_command
  1214 ;; This function is called by:
  1215 ;;		_ecu_layer_initialize
  1216 ;; This function uses a non-reentrant model
  1217 ;;
  1218                           
  1219                           	psect	text8
  1220   0015C4                     __ptext8:
  1221                           	callstack 0
  1222   0015C4                     _lcd_init:
  1223                           	callstack 24
  1224   0015C4                     
  1225                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 11: Std_ReturnType lcd_init(const chr_lcd_t *lcd);ECUAL/Ch
      +                          r_LCD/ecu_chr_lcd.c: 12: {;ECUAL/Chr_LCD/ecu_chr_lcd.c: 13:     Std_ReturnType ret = E_N
      +                          OT_OK;
  1226   0015C4  0E00               	movlw	0
  1227   0015C6  6E3F               	movwf	lcd_init@ret^0,c
  1228                           
  1229                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 15:     if(lcd)
  1230   0015C8  503C               	movf	lcd_init@lcd^0,w,c
  1231   0015CA  B4D8               	btfsc	status,2,c
  1232   0015CC  EFEA  F00A         	goto	u1841
  1233   0015D0  EFEC  F00A         	goto	u1840
  1234   0015D4                     u1841:
  1235   0015D4  EF5D  F00B         	goto	l2853
  1236   0015D8                     u1840:
  1237   0015D8  C03C  F02A         	movff	lcd_init@lcd,lcd_assign_pins@lcd
  1238   0015DC  EC58  F00A         	call	_lcd_assign_pins	;wreg free
  1239   0015E0                     
  1240                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 20:         for(counter = 0; counter < 4; counter++)
  1241   0015E0  0E00               	movlw	0
  1242   0015E2  6E3E               	movwf	lcd_init@counter^0,c
  1243   0015E4                     l2837:
  1244                           
  1245                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 21:             ret = gpio_pin_initialize(&data_pins[count
      +                          er]);
  1246   0015E4  503E               	movf	lcd_init@counter^0,w,c
  1247   0015E6  0F21               	addlw	low _data_pins
  1248   0015E8  6E33               	movwf	gpio_pin_initialize@_pin_config^0,c
  1249   0015EA  EC41  F00D         	call	_gpio_pin_initialize	;wreg free
  1250   0015EE  6E3F               	movwf	lcd_init@ret^0,c
  1251   0015F0  2A3E               	incf	lcd_init@counter^0,f,c
  1252   0015F2  0E03               	movlw	3
  1253   0015F4  643E               	cpfsgt	lcd_init@counter^0,c
  1254   0015F6  EFFF  F00A         	goto	u1851
  1255   0015FA  EF01  F00B         	goto	u1850
  1256   0015FE                     u1851:
  1257   0015FE  EFF2  F00A         	goto	l2837
  1258   001602                     u1850:
  1259   001602                     
  1260                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 22:         ret &= gpio_pin_initialize(&enable_pin);
  1261   001602  0E29               	movlw	low _enable_pin
  1262   001604  6E33               	movwf	gpio_pin_initialize@_pin_config^0,c
  1263   001606  EC41  F00D         	call	_gpio_pin_initialize	;wreg free
  1264   00160A  163F               	andwf	lcd_init@ret^0,f,c
  1265                           
  1266                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 23:         ret &= gpio_pin_initialize(&rs_pin);
  1267   00160C  0E28               	movlw	low _rs_pin
  1268   00160E  6E33               	movwf	gpio_pin_initialize@_pin_config^0,c
  1269   001610  EC41  F00D         	call	_gpio_pin_initialize	;wreg free
  1270   001614  163F               	andwf	lcd_init@ret^0,f,c
  1271   001616                     
  1272                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 25:         _delay((unsigned long)((20)*(4000000/4000.0)))
      +                          ;
  1273   001616  0E1A               	movlw	26
  1274   001618  6E3D               	movwf	??_lcd_init^0,c
  1275   00161A  0EF8               	movlw	248
  1276   00161C                     u2567:
  1277   00161C  2EE8               	decfsz	wreg,f,c
  1278   00161E  D7FE               	bra	u2567
  1279   001620  2E3D               	decfsz	??_lcd_init^0,f,c
  1280   001622  D7FC               	bra	u2567
  1281   001624  D000               	nop2	
  1282   001626                     
  1283                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 26:         ret &= lcd_send_command(lcd, 0x30);
  1284   001626  C03C  F039         	movff	lcd_init@lcd,lcd_send_command@lcd
  1285   00162A  0E30               	movlw	48
  1286   00162C  6E3A               	movwf	lcd_send_command@command^0,c
  1287   00162E  EC0C  F00D         	call	_lcd_send_command	;wreg free
  1288   001632  163F               	andwf	lcd_init@ret^0,f,c
  1289                           
  1290                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 28:         _delay((unsigned long)((5)*(4000000/4000.0)));
  1291   001634  0E07               	movlw	7
  1292   001636  6E3D               	movwf	??_lcd_init^0,c
  1293   001638  0E7D               	movlw	125
  1294   00163A                     u2577:
  1295   00163A  2EE8               	decfsz	wreg,f,c
  1296   00163C  D7FE               	bra	u2577
  1297   00163E  2E3D               	decfsz	??_lcd_init^0,f,c
  1298   001640  D7FC               	bra	u2577
  1299   001642  0000               	nop	
  1300   001644                     
  1301                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 29:         ret &= lcd_send_command(lcd, 0x30);
  1302   001644  C03C  F039         	movff	lcd_init@lcd,lcd_send_command@lcd
  1303   001648  0E30               	movlw	48
  1304   00164A  6E3A               	movwf	lcd_send_command@command^0,c
  1305   00164C  EC0C  F00D         	call	_lcd_send_command	;wreg free
  1306   001650  163F               	andwf	lcd_init@ret^0,f,c
  1307   001652                     
  1308                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 31:         _delay((unsigned long)((150)*(4000000/4000000.
      +                          0)));
  1309   001652  0E32               	movlw	50
  1310   001654                     u2587:
  1311   001654  2EE8               	decfsz	wreg,f,c
  1312   001656  D7FE               	bra	u2587
  1313                           
  1314                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 32:         ret &= lcd_send_command(lcd, 0x30);
  1315   001658  C03C  F039         	movff	lcd_init@lcd,lcd_send_command@lcd
  1316   00165C  0E30               	movlw	48
  1317   00165E  6E3A               	movwf	lcd_send_command@command^0,c
  1318   001660  EC0C  F00D         	call	_lcd_send_command	;wreg free
  1319   001664  163F               	andwf	lcd_init@ret^0,f,c
  1320                           
  1321                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 37:         ret &= lcd_send_command(lcd, 0x20 >> 4);
  1322   001666  C03C  F039         	movff	lcd_init@lcd,lcd_send_command@lcd
  1323   00166A  0E02               	movlw	2
  1324   00166C  6E3A               	movwf	lcd_send_command@command^0,c
  1325   00166E  EC0C  F00D         	call	_lcd_send_command	;wreg free
  1326   001672  163F               	andwf	lcd_init@ret^0,f,c
  1327                           
  1328                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 38:         ret &= lcd_send_command(lcd, 0x20 | 0x28);
  1329   001674  C03C  F039         	movff	lcd_init@lcd,lcd_send_command@lcd
  1330   001678  0E28               	movlw	40
  1331   00167A  6E3A               	movwf	lcd_send_command@command^0,c
  1332   00167C  EC0C  F00D         	call	_lcd_send_command	;wreg free
  1333   001680  163F               	andwf	lcd_init@ret^0,f,c
  1334                           
  1335                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 40:         ret &= lcd_send_command(lcd, 0x0C);
  1336   001682  C03C  F039         	movff	lcd_init@lcd,lcd_send_command@lcd
  1337   001686  0E0C               	movlw	12
  1338   001688  6E3A               	movwf	lcd_send_command@command^0,c
  1339   00168A  EC0C  F00D         	call	_lcd_send_command	;wreg free
  1340   00168E  163F               	andwf	lcd_init@ret^0,f,c
  1341                           
  1342                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 41:         ret &= lcd_send_command(lcd, 0x01);
  1343   001690  C03C  F039         	movff	lcd_init@lcd,lcd_send_command@lcd
  1344   001694  0E01               	movlw	1
  1345   001696  6E3A               	movwf	lcd_send_command@command^0,c
  1346   001698  EC0C  F00D         	call	_lcd_send_command	;wreg free
  1347   00169C  163F               	andwf	lcd_init@ret^0,f,c
  1348                           
  1349                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 42:         ret &= lcd_send_command(lcd, 0x06);
  1350   00169E  C03C  F039         	movff	lcd_init@lcd,lcd_send_command@lcd
  1351   0016A2  0E06               	movlw	6
  1352   0016A4  6E3A               	movwf	lcd_send_command@command^0,c
  1353   0016A6  EC0C  F00D         	call	_lcd_send_command	;wreg free
  1354   0016AA  163F               	andwf	lcd_init@ret^0,f,c
  1355                           
  1356                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 43:         ret &= lcd_send_command(lcd, 0x02);
  1357   0016AC  C03C  F039         	movff	lcd_init@lcd,lcd_send_command@lcd
  1358   0016B0  0E02               	movlw	2
  1359   0016B2  6E3A               	movwf	lcd_send_command@command^0,c
  1360   0016B4  EC0C  F00D         	call	_lcd_send_command	;wreg free
  1361   0016B8  163F               	andwf	lcd_init@ret^0,f,c
  1362   0016BA                     l2853:
  1363                           
  1364                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 46:     return ret;
  1365   0016BA  503F               	movf	lcd_init@ret^0,w,c
  1366   0016BC  0012               	return		;funcret
  1367   0016BE                     __end_of_lcd_init:
  1368                           	callstack 0
  1369                           
  1370 ;; *************** function _lcd_send_command *****************
  1371 ;; Defined at:
  1372 ;;		line 49 in file "ECUAL/Chr_LCD/ecu_chr_lcd.c"
  1373 ;; Parameters:    Size  Location     Type
  1374 ;;  lcd             1   15[COMRAM] PTR const struct lcd
  1375 ;;		 -> lcd(6), 
  1376 ;;  command         1   16[COMRAM] unsigned char 
  1377 ;; Auto vars:     Size  Location     Type
  1378 ;;  ret             1   17[COMRAM] enum E2813
  1379 ;; Return value:  Size  Location     Type
  1380 ;;                  1    wreg      enum E2813
  1381 ;; Registers used:
  1382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1383 ;; Tracked objects:
  1384 ;;		On entry : 0/0
  1385 ;;		On exit  : 0/0
  1386 ;;		Unchanged: 0/0
  1387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1388 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1389 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1391 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1392 ;;Total ram usage:        3 bytes
  1393 ;; Hardware stack levels used: 1
  1394 ;; Hardware stack levels required when called: 3
  1395 ;; This function calls:
  1396 ;;		_gpio_pin_write_logic
  1397 ;;		_lcd_assign_pins
  1398 ;;		_lcd_send_bits
  1399 ;; This function is called by:
  1400 ;;		_lcd_init
  1401 ;;		_lcd_send_data_pos
  1402 ;;		_lcd_send_string_pos
  1403 ;;		_lcd_send_custom_char
  1404 ;; This function uses a non-reentrant model
  1405 ;;
  1406                           
  1407                           	psect	text9
  1408   001A18                     __ptext9:
  1409                           	callstack 0
  1410   001A18                     _lcd_send_command:
  1411                           	callstack 24
  1412   001A18                     
  1413                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 49: Std_ReturnType lcd_send_command(const chr_lcd_t *lcd, 
      +                          uint8 command);ECUAL/Chr_LCD/ecu_chr_lcd.c: 50: {;ECUAL/Chr_LCD/ecu_chr_lcd.c: 51:     S
      +                          td_ReturnType ret = E_NOT_OK;
  1414   001A18  0E00               	movlw	0
  1415   001A1A  6E3B               	movwf	lcd_send_command@ret^0,c
  1416                           
  1417                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 53:     if(lcd)
  1418   001A1C  5039               	movf	lcd_send_command@lcd^0,w,c
  1419   001A1E  B4D8               	btfsc	status,2,c
  1420   001A20  EF14  F00D         	goto	u1791
  1421   001A24  EF16  F00D         	goto	u1790
  1422   001A28                     u1791:
  1423   001A28  EF26  F00D         	goto	l2779
  1424   001A2C                     u1790:
  1425   001A2C                     
  1426                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 56:         ret = lcd_assign_pins(lcd);
  1427   001A2C  C039  F02A         	movff	lcd_send_command@lcd,lcd_assign_pins@lcd
  1428   001A30  EC58  F00A         	call	_lcd_assign_pins	;wreg free
  1429   001A34  6E3B               	movwf	lcd_send_command@ret^0,c
  1430   001A36                     
  1431                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 57:         ret &= gpio_pin_write_logic(&rs_pin, GPIO_LOW)
      +                          ;
  1432   001A36  0E28               	movlw	low _rs_pin
  1433   001A38  6E2A               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1434   001A3A  0E00               	movlw	0
  1435   001A3C  6E2B               	movwf	gpio_pin_write_logic@logic^0,c
  1436   001A3E  EC18  F008         	call	_gpio_pin_write_logic	;wreg free
  1437   001A42  163B               	andwf	lcd_send_command@ret^0,f,c
  1438   001A44                     
  1439                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 58:         ret &= lcd_send_bits(command);
  1440   001A44  503A               	movf	lcd_send_command@command^0,w,c
  1441   001A46  EC30  F00C         	call	_lcd_send_bits
  1442   001A4A  163B               	andwf	lcd_send_command@ret^0,f,c
  1443   001A4C                     l2779:
  1444                           
  1445                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 61:     return ret;
  1446   001A4C  503B               	movf	lcd_send_command@ret^0,w,c
  1447   001A4E  0012               	return		;funcret
  1448   001A50                     __end_of_lcd_send_command:
  1449                           	callstack 0
  1450                           
  1451 ;; *************** function _lcd_send_bits *****************
  1452 ;; Defined at:
  1453 ;;		line 301 in file "ECUAL/Chr_LCD/ecu_chr_lcd.c"
  1454 ;; Parameters:    Size  Location     Type
  1455 ;;  bits            1    wreg     const unsigned char 
  1456 ;; Auto vars:     Size  Location     Type
  1457 ;;  bits            1   12[COMRAM] const unsigned char 
  1458 ;;  counter         1   14[COMRAM] unsigned char 
  1459 ;;  ret             1   13[COMRAM] enum E2813
  1460 ;; Return value:  Size  Location     Type
  1461 ;;                  1    wreg      enum E2813
  1462 ;; Registers used:
  1463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1464 ;; Tracked objects:
  1465 ;;		On entry : 0/0
  1466 ;;		On exit  : 0/0
  1467 ;;		Unchanged: 0/0
  1468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1470 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1471 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1472 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1473 ;;Total ram usage:        5 bytes
  1474 ;; Hardware stack levels used: 1
  1475 ;; Hardware stack levels required when called: 2
  1476 ;; This function calls:
  1477 ;;		_gpio_pin_write_logic
  1478 ;;		_lcd_send_enable_signal
  1479 ;; This function is called by:
  1480 ;;		_lcd_send_command
  1481 ;;		_lcd_send_data
  1482 ;; This function uses a non-reentrant model
  1483 ;;
  1484                           
  1485                           	psect	text10
  1486   001860                     __ptext10:
  1487                           	callstack 0
  1488   001860                     _lcd_send_bits:
  1489                           	callstack 27
  1490                           
  1491                           ;incstack = 0
  1492                           ;lcd_send_bits@bits stored from wreg
  1493   001860  6E36               	movwf	lcd_send_bits@bits^0,c
  1494   001862                     
  1495                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 301: static Std_ReturnType lcd_send_bits(const uint8 bits)
      +                          ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 302: {;ECUAL/Chr_LCD/ecu_chr_lcd.c: 303:     uint8 counter
      +                          ;;ECUAL/Chr_LCD/ecu_chr_lcd.c: 304:     Std_ReturnType ret = E_OK;
  1496   001862  0E01               	movlw	1
  1497   001864  6E37               	movwf	lcd_send_bits@ret^0,c
  1498                           
  1499                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 307:     for(counter = 0; counter < 4; counter++)
  1500   001866  0E00               	movlw	0
  1501   001868  6E38               	movwf	lcd_send_bits@counter^0,c
  1502   00186A                     l2735:
  1503                           
  1504                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 308:             ret &= gpio_pin_write_logic(&data_pins[co
      +                          unter], ((bits >> 4) >> counter) & 0x01);
  1505   00186A  5038               	movf	lcd_send_bits@counter^0,w,c
  1506   00186C  0F21               	addlw	low _data_pins
  1507   00186E  6E2A               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1508   001870  C038  F034         	movff	lcd_send_bits@counter,??_lcd_send_bits
  1509   001874  C036  F035         	movff	lcd_send_bits@bits,??_lcd_send_bits+1
  1510   001878  3A35               	swapf	(??_lcd_send_bits+1)^0,f,c
  1511   00187A  0E0F               	movlw	15
  1512   00187C  1635               	andwf	(??_lcd_send_bits+1)^0,f,c
  1513   00187E  2A34               	incf	??_lcd_send_bits^0,f,c
  1514   001880  EF44  F00C         	goto	u1754
  1515   001884                     u1755:
  1516   001884  90D8               	bcf	status,0,c
  1517   001886  3235               	rrcf	(??_lcd_send_bits+1)^0,f,c
  1518   001888                     u1754:
  1519   001888  2E34               	decfsz	??_lcd_send_bits^0,f,c
  1520   00188A  EF42  F00C         	goto	u1755
  1521   00188E  5035               	movf	(??_lcd_send_bits+1)^0,w,c
  1522   001890  0B01               	andlw	1
  1523   001892  6E2B               	movwf	gpio_pin_write_logic@logic^0,c
  1524   001894  EC18  F008         	call	_gpio_pin_write_logic	;wreg free
  1525   001898  1637               	andwf	lcd_send_bits@ret^0,f,c
  1526   00189A  2A38               	incf	lcd_send_bits@counter^0,f,c
  1527   00189C  0E03               	movlw	3
  1528   00189E  6438               	cpfsgt	lcd_send_bits@counter^0,c
  1529   0018A0  EF54  F00C         	goto	u1761
  1530   0018A4  EF56  F00C         	goto	u1760
  1531   0018A8                     u1761:
  1532   0018A8  EF35  F00C         	goto	l2735
  1533   0018AC                     u1760:
  1534   0018AC                     
  1535                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 309:     ret &= lcd_send_enable_signal();
  1536   0018AC  EC56  F00D         	call	_lcd_send_enable_signal	;wreg free
  1537   0018B0  1637               	andwf	lcd_send_bits@ret^0,f,c
  1538   0018B2                     
  1539                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 312:     for(counter = 0; counter < 4; counter++)
  1540   0018B2  0E00               	movlw	0
  1541   0018B4  6E38               	movwf	lcd_send_bits@counter^0,c
  1542   0018B6                     l2749:
  1543                           
  1544                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 313:             ret &= gpio_pin_write_logic(&data_pins[co
      +                          unter], (bits >> counter) & 0x01);
  1545   0018B6  5038               	movf	lcd_send_bits@counter^0,w,c
  1546   0018B8  0F21               	addlw	low _data_pins
  1547   0018BA  6E2A               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1548   0018BC  C038  F034         	movff	lcd_send_bits@counter,??_lcd_send_bits
  1549   0018C0  C036  F035         	movff	lcd_send_bits@bits,??_lcd_send_bits+1
  1550   0018C4  2A34               	incf	??_lcd_send_bits^0,f,c
  1551   0018C6  EF67  F00C         	goto	u1774
  1552   0018CA                     u1775:
  1553   0018CA  90D8               	bcf	status,0,c
  1554   0018CC  3235               	rrcf	(??_lcd_send_bits+1)^0,f,c
  1555   0018CE                     u1774:
  1556   0018CE  2E34               	decfsz	??_lcd_send_bits^0,f,c
  1557   0018D0  EF65  F00C         	goto	u1775
  1558   0018D4  5035               	movf	(??_lcd_send_bits+1)^0,w,c
  1559   0018D6  0B01               	andlw	1
  1560   0018D8  6E2B               	movwf	gpio_pin_write_logic@logic^0,c
  1561   0018DA  EC18  F008         	call	_gpio_pin_write_logic	;wreg free
  1562   0018DE  1637               	andwf	lcd_send_bits@ret^0,f,c
  1563   0018E0  2A38               	incf	lcd_send_bits@counter^0,f,c
  1564   0018E2  0E03               	movlw	3
  1565   0018E4  6438               	cpfsgt	lcd_send_bits@counter^0,c
  1566   0018E6  EF77  F00C         	goto	u1781
  1567   0018EA  EF79  F00C         	goto	u1780
  1568   0018EE                     u1781:
  1569   0018EE  EF5B  F00C         	goto	l2749
  1570   0018F2                     u1780:
  1571   0018F2                     
  1572                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 314:     ret &= lcd_send_enable_signal();
  1573   0018F2  EC56  F00D         	call	_lcd_send_enable_signal	;wreg free
  1574   0018F6  1637               	andwf	lcd_send_bits@ret^0,f,c
  1575   0018F8                     
  1576                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 316:     return ret;
  1577   0018F8  5037               	movf	lcd_send_bits@ret^0,w,c
  1578   0018FA  0012               	return		;funcret
  1579   0018FC                     __end_of_lcd_send_bits:
  1580                           	callstack 0
  1581                           
  1582 ;; *************** function _lcd_send_enable_signal *****************
  1583 ;; Defined at:
  1584 ;;		line 290 in file "ECUAL/Chr_LCD/ecu_chr_lcd.c"
  1585 ;; Parameters:    Size  Location     Type
  1586 ;;		None
  1587 ;; Auto vars:     Size  Location     Type
  1588 ;;  ret             1    9[COMRAM] enum E2813
  1589 ;; Return value:  Size  Location     Type
  1590 ;;                  1    wreg      enum E2813
  1591 ;; Registers used:
  1592 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1593 ;; Tracked objects:
  1594 ;;		On entry : 0/0
  1595 ;;		On exit  : 0/0
  1596 ;;		Unchanged: 0/0
  1597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1599 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1601 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1602 ;;Total ram usage:        1 bytes
  1603 ;; Hardware stack levels used: 1
  1604 ;; Hardware stack levels required when called: 1
  1605 ;; This function calls:
  1606 ;;		_gpio_pin_write_logic
  1607 ;; This function is called by:
  1608 ;;		_lcd_send_bits
  1609 ;; This function uses a non-reentrant model
  1610 ;;
  1611                           
  1612                           	psect	text11
  1613   001AAC                     __ptext11:
  1614                           	callstack 0
  1615   001AAC                     _lcd_send_enable_signal:
  1616                           	callstack 27
  1617   001AAC                     
  1618                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 294:     ret = gpio_pin_write_logic(&enable_pin, GPIO_HIGH
      +                          );
  1619   001AAC  0E29               	movlw	low _enable_pin
  1620   001AAE  6E2A               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1621   001AB0  0E01               	movlw	1
  1622   001AB2  6E2B               	movwf	gpio_pin_write_logic@logic^0,c
  1623   001AB4  EC18  F008         	call	_gpio_pin_write_logic	;wreg free
  1624   001AB8  6E33               	movwf	lcd_send_enable_signal@ret^0,c
  1625   001ABA                     
  1626                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 295:     _delay((unsigned long)((10)*(4000000/4000000.0)))
      +                          ;
  1627   001ABA  0E03               	movlw	3
  1628   001ABC                     u2597:
  1629   001ABC  2EE8               	decfsz	wreg,f,c
  1630   001ABE  D7FE               	bra	u2597
  1631   001AC0  0000               	nop	
  1632   001AC2                     
  1633                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 296:     ret &= gpio_pin_write_logic(&enable_pin, GPIO_LOW
      +                          );
  1634   001AC2  0E29               	movlw	low _enable_pin
  1635   001AC4  6E2A               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1636   001AC6  0E00               	movlw	0
  1637   001AC8  6E2B               	movwf	gpio_pin_write_logic@logic^0,c
  1638   001ACA  EC18  F008         	call	_gpio_pin_write_logic	;wreg free
  1639   001ACE  1633               	andwf	lcd_send_enable_signal@ret^0,f,c
  1640   001AD0                     
  1641                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 298:     return ret;
  1642   001AD0  5033               	movf	lcd_send_enable_signal@ret^0,w,c
  1643   001AD2  0012               	return		;funcret
  1644   001AD4                     __end_of_lcd_send_enable_signal:
  1645                           	callstack 0
  1646                           
  1647 ;; *************** function _lcd_assign_pins *****************
  1648 ;; Defined at:
  1649 ;;		line 261 in file "ECUAL/Chr_LCD/ecu_chr_lcd.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;  lcd             1    0[COMRAM] const PTR const struct l
  1652 ;;		 -> lcd(6), 
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;  counter         1    3[COMRAM] unsigned char 
  1655 ;;  ret             1    2[COMRAM] enum E2813
  1656 ;; Return value:  Size  Location     Type
  1657 ;;                  1    wreg      enum E2813
  1658 ;; Registers used:
  1659 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1660 ;; Tracked objects:
  1661 ;;		On entry : 0/0
  1662 ;;		On exit  : 0/0
  1663 ;;		Unchanged: 0/0
  1664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1665 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1666 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1667 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1668 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1669 ;;Total ram usage:        4 bytes
  1670 ;; Hardware stack levels used: 1
  1671 ;; This function calls:
  1672 ;;		Nothing
  1673 ;; This function is called by:
  1674 ;;		_lcd_init
  1675 ;;		_lcd_send_command
  1676 ;;		_lcd_send_data
  1677 ;;		_lcd_send_custom_char
  1678 ;; This function uses a non-reentrant model
  1679 ;;
  1680                           
  1681                           	psect	text12
  1682   0014B0                     __ptext12:
  1683                           	callstack 0
  1684   0014B0                     _lcd_assign_pins:
  1685                           	callstack 29
  1686   0014B0                     
  1687                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 261: static Std_ReturnType lcd_assign_pins(const chr_lcd_t
      +                           *const lcd);ECUAL/Chr_LCD/ecu_chr_lcd.c: 262: {;ECUAL/Chr_LCD/ecu_chr_lcd.c: 263:     S
      +                          td_ReturnType ret = E_NOT_OK;
  1688   0014B0  0E00               	movlw	0
  1689   0014B2  6E2C               	movwf	lcd_assign_pins@ret^0,c
  1690                           
  1691                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 264:     if (lcd)
  1692   0014B4  502A               	movf	lcd_assign_pins@lcd^0,w,c
  1693   0014B6  B4D8               	btfsc	status,2,c
  1694   0014B8  EF60  F00A         	goto	u1731
  1695   0014BC  EF62  F00A         	goto	u1730
  1696   0014C0                     u1731:
  1697   0014C0  EFE0  F00A         	goto	l2725
  1698   0014C4                     u1730:
  1699   0014C4                     
  1700                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 265:     {;ECUAL/Chr_LCD/ecu_chr_lcd.c: 266:         uint8
      +                           counter;;ECUAL/Chr_LCD/ecu_chr_lcd.c: 267:         ret = E_OK;
  1701   0014C4  0E01               	movlw	1
  1702   0014C6  6E2C               	movwf	lcd_assign_pins@ret^0,c
  1703                           
  1704                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 268:         for (counter = 0; counter < 4; counter++)
  1705   0014C8  0E00               	movlw	0
  1706   0014CA  6E2D               	movwf	lcd_assign_pins@counter^0,c
  1707   0014CC                     l2711:
  1708                           
  1709                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 269:         {;ECUAL/Chr_LCD/ecu_chr_lcd.c: 270:          
      +                             data_pins[counter].pin_index = lcd->data[counter].pin_index;
  1710   0014CC  502A               	movf	lcd_assign_pins@lcd^0,w,c
  1711   0014CE  242D               	addwf	lcd_assign_pins@counter^0,w,c
  1712   0014D0  6ED9               	movwf	fsr2l,c
  1713   0014D2  6ADA               	clrf	fsr2h,c
  1714   0014D4  0E02               	movlw	2
  1715   0014D6  26D9               	addwf	fsr2l,f,c
  1716   0014D8  50DF               	movf	223,w,c
  1717   0014DA  0B07               	andlw	7
  1718   0014DC  6E2B               	movwf	??_lcd_assign_pins^0,c
  1719   0014DE  502D               	movf	lcd_assign_pins@counter^0,w,c
  1720   0014E0  0F21               	addlw	low _data_pins
  1721   0014E2  6ED9               	movwf	fsr2l,c
  1722   0014E4  6ADA               	clrf	fsr2h,c
  1723   0014E6  462B               	rlncf	??_lcd_assign_pins^0,f,c
  1724   0014E8  462B               	rlncf	??_lcd_assign_pins^0,f,c
  1725   0014EA  462B               	rlncf	??_lcd_assign_pins^0,f,c
  1726   0014EC  50DF               	movf	223,w,c
  1727   0014EE  182B               	xorwf	??_lcd_assign_pins^0,w,c
  1728   0014F0  0BC7               	andlw	-57
  1729   0014F2  182B               	xorwf	??_lcd_assign_pins^0,w,c
  1730   0014F4  6EDF               	movwf	223,c
  1731                           
  1732                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 271:             data_pins[counter].port_index = lcd->data
      +                          [counter].port_index;
  1733   0014F6  502A               	movf	lcd_assign_pins@lcd^0,w,c
  1734   0014F8  242D               	addwf	lcd_assign_pins@counter^0,w,c
  1735   0014FA  6ED9               	movwf	fsr2l,c
  1736   0014FC  6ADA               	clrf	fsr2h,c
  1737   0014FE  0E02               	movlw	2
  1738   001500  26D9               	addwf	fsr2l,f,c
  1739   001502  30DF               	rrcf	223,w,c
  1740   001504  32E8               	rrcf	wreg,f,c
  1741   001506  32E8               	rrcf	wreg,f,c
  1742   001508  0B07               	andlw	7
  1743   00150A  6E2B               	movwf	??_lcd_assign_pins^0,c
  1744   00150C  502D               	movf	lcd_assign_pins@counter^0,w,c
  1745   00150E  0F21               	addlw	low _data_pins
  1746   001510  6ED9               	movwf	fsr2l,c
  1747   001512  6ADA               	clrf	fsr2h,c
  1748   001514  50DF               	movf	223,w,c
  1749   001516  182B               	xorwf	??_lcd_assign_pins^0,w,c
  1750   001518  0BF8               	andlw	-8
  1751   00151A  182B               	xorwf	??_lcd_assign_pins^0,w,c
  1752   00151C  6EDF               	movwf	223,c
  1753                           
  1754                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 272:             data_pins[counter].pin_direction = GPIO_O
      +                          UTPUT;
  1755   00151E  502D               	movf	lcd_assign_pins@counter^0,w,c
  1756   001520  0F21               	addlw	low _data_pins
  1757   001522  6ED9               	movwf	fsr2l,c
  1758   001524  6ADA               	clrf	fsr2h,c
  1759   001526  9CDF               	bcf	indf2,6,c
  1760                           
  1761                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 273:             data_pins[counter].logic = GPIO_LOW;
  1762   001528  502D               	movf	lcd_assign_pins@counter^0,w,c
  1763   00152A  0F21               	addlw	low _data_pins
  1764   00152C  6ED9               	movwf	fsr2l,c
  1765   00152E  6ADA               	clrf	fsr2h,c
  1766   001530  9EDF               	bcf	indf2,7,c
  1767   001532                     
  1768                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 274:         }
  1769   001532  2A2D               	incf	lcd_assign_pins@counter^0,f,c
  1770   001534  0E03               	movlw	3
  1771   001536  642D               	cpfsgt	lcd_assign_pins@counter^0,c
  1772   001538  EFA0  F00A         	goto	u1741
  1773   00153C  EFA2  F00A         	goto	u1740
  1774   001540                     u1741:
  1775   001540  EF66  F00A         	goto	l2711
  1776   001544                     u1740:
  1777   001544                     
  1778                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 275:         enable_pin.pin_direction = GPIO_OUTPUT;
  1779   001544  9C29               	bcf	_enable_pin^0,6,c
  1780   001546                     
  1781                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 276:         enable_pin.pin_index = lcd->en.pin_index;
  1782   001546  502A               	movf	lcd_assign_pins@lcd^0,w,c
  1783   001548  6ED9               	movwf	fsr2l,c
  1784   00154A  6ADA               	clrf	fsr2h,c
  1785   00154C  0E01               	movlw	1
  1786   00154E  26D9               	addwf	fsr2l,f,c
  1787   001550  50DF               	movf	223,w,c
  1788   001552  0B07               	andlw	7
  1789   001554  6E2B               	movwf	??_lcd_assign_pins^0,c
  1790   001556  462B               	rlncf	??_lcd_assign_pins^0,f,c
  1791   001558  462B               	rlncf	??_lcd_assign_pins^0,f,c
  1792   00155A  462B               	rlncf	??_lcd_assign_pins^0,f,c
  1793   00155C  5029               	movf	_enable_pin^0,w,c
  1794   00155E  182B               	xorwf	??_lcd_assign_pins^0,w,c
  1795   001560  0BC7               	andlw	-57
  1796   001562  182B               	xorwf	??_lcd_assign_pins^0,w,c
  1797   001564  6E29               	movwf	_enable_pin^0,c
  1798                           
  1799                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 277:         enable_pin.port_index = lcd->en.port_index;
  1800   001566  502A               	movf	lcd_assign_pins@lcd^0,w,c
  1801   001568  6ED9               	movwf	fsr2l,c
  1802   00156A  6ADA               	clrf	fsr2h,c
  1803   00156C  0E01               	movlw	1
  1804   00156E  26D9               	addwf	fsr2l,f,c
  1805   001570  30DF               	rrcf	223,w,c
  1806   001572  32E8               	rrcf	wreg,f,c
  1807   001574  32E8               	rrcf	wreg,f,c
  1808   001576  0B07               	andlw	7
  1809   001578  6E2B               	movwf	??_lcd_assign_pins^0,c
  1810   00157A  5029               	movf	_enable_pin^0,w,c
  1811   00157C  182B               	xorwf	??_lcd_assign_pins^0,w,c
  1812   00157E  0BF8               	andlw	-8
  1813   001580  182B               	xorwf	??_lcd_assign_pins^0,w,c
  1814   001582  6E29               	movwf	_enable_pin^0,c
  1815   001584                     
  1816                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 278:         enable_pin.logic = GPIO_LOW;
  1817   001584  9E29               	bcf	_enable_pin^0,7,c
  1818   001586                     
  1819                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 280:         rs_pin.pin_direction = GPIO_OUTPUT;
  1820   001586  9C28               	bcf	_rs_pin^0,6,c
  1821                           
  1822                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 281:         rs_pin.pin_index = lcd->rs.pin_index;
  1823   001588  502A               	movf	lcd_assign_pins@lcd^0,w,c
  1824   00158A  6ED9               	movwf	fsr2l,c
  1825   00158C  6ADA               	clrf	fsr2h,c
  1826   00158E  50DF               	movf	223,w,c
  1827   001590  0B07               	andlw	7
  1828   001592  6E2B               	movwf	??_lcd_assign_pins^0,c
  1829   001594  462B               	rlncf	??_lcd_assign_pins^0,f,c
  1830   001596  462B               	rlncf	??_lcd_assign_pins^0,f,c
  1831   001598  462B               	rlncf	??_lcd_assign_pins^0,f,c
  1832   00159A  5028               	movf	_rs_pin^0,w,c
  1833   00159C  182B               	xorwf	??_lcd_assign_pins^0,w,c
  1834   00159E  0BC7               	andlw	-57
  1835   0015A0  182B               	xorwf	??_lcd_assign_pins^0,w,c
  1836   0015A2  6E28               	movwf	_rs_pin^0,c
  1837                           
  1838                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 282:         rs_pin.port_index = lcd->rs.port_index;
  1839   0015A4  502A               	movf	lcd_assign_pins@lcd^0,w,c
  1840   0015A6  6ED9               	movwf	fsr2l,c
  1841   0015A8  6ADA               	clrf	fsr2h,c
  1842   0015AA  30DF               	rrcf	223,w,c
  1843   0015AC  32E8               	rrcf	wreg,f,c
  1844   0015AE  32E8               	rrcf	wreg,f,c
  1845   0015B0  0B07               	andlw	7
  1846   0015B2  6E2B               	movwf	??_lcd_assign_pins^0,c
  1847   0015B4  5028               	movf	_rs_pin^0,w,c
  1848   0015B6  182B               	xorwf	??_lcd_assign_pins^0,w,c
  1849   0015B8  0BF8               	andlw	-8
  1850   0015BA  182B               	xorwf	??_lcd_assign_pins^0,w,c
  1851   0015BC  6E28               	movwf	_rs_pin^0,c
  1852   0015BE                     
  1853                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 283:         rs_pin.logic = GPIO_LOW;
  1854   0015BE  9E28               	bcf	_rs_pin^0,7,c
  1855   0015C0                     l2725:
  1856                           
  1857                           ;ECUAL/Chr_LCD/ecu_chr_lcd.c: 286:     return ret;
  1858   0015C0  502C               	movf	lcd_assign_pins@ret^0,w,c
  1859   0015C2  0012               	return		;funcret
  1860   0015C4                     __end_of_lcd_assign_pins:
  1861                           	callstack 0
  1862                           
  1863 ;; *************** function _keypad_init *****************
  1864 ;; Defined at:
  1865 ;;		line 68 in file "ECUAL/Keypad/ecu_keypad.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;  keypad          1   11[COMRAM] const PTR const struct .
  1868 ;;		 -> keypad(9), 
  1869 ;; Auto vars:     Size  Location     Type
  1870 ;;  ret_val         1   12[COMRAM] enum E2813
  1871 ;; Return value:  Size  Location     Type
  1872 ;;                  1    wreg      enum E2813
  1873 ;; Registers used:
  1874 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1875 ;; Tracked objects:
  1876 ;;		On entry : 0/0
  1877 ;;		On exit  : 0/0
  1878 ;;		Unchanged: 0/0
  1879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1880 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1881 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1883 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1884 ;;Total ram usage:        2 bytes
  1885 ;; Hardware stack levels used: 1
  1886 ;; Hardware stack levels required when called: 2
  1887 ;; This function calls:
  1888 ;;		_assign_pins@ecu_keypad$F381
  1889 ;;		_gpio_pin_direction_initialize
  1890 ;;		_gpio_pin_initialize
  1891 ;; This function is called by:
  1892 ;;		_ecu_layer_initialize
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           	psect	text13
  1897   0018FC                     __ptext13:
  1898                           	callstack 0
  1899   0018FC                     _keypad_init:
  1900                           	callstack 26
  1901   0018FC                     
  1902                           ;ECUAL/Keypad/ecu_keypad.c: 72:     if(((void*)0) == keypad)
  1903   0018FC  5035               	movf	keypad_init@keypad^0,w,c
  1904   0018FE  A4D8               	btfss	status,2,c
  1905   001900  EF84  F00C         	goto	u1861
  1906   001904  EF86  F00C         	goto	u1860
  1907   001908                     u1861:
  1908   001908  EF8A  F00C         	goto	l2861
  1909   00190C                     u1860:
  1910   00190C                     
  1911                           ;ECUAL/Keypad/ecu_keypad.c: 73:     {;ECUAL/Keypad/ecu_keypad.c: 74:         ret_val = E
      +                          _NOT_OK;
  1912   00190C  0E00               	movlw	0
  1913   00190E  6E36               	movwf	keypad_init@ret_val^0,c
  1914                           
  1915                           ;ECUAL/Keypad/ecu_keypad.c: 75:     }
  1916   001910  EFC1  F00C         	goto	l2889
  1917   001914                     l2861:
  1918                           
  1919                           ;ECUAL/Keypad/ecu_keypad.c: 77:     {;ECUAL/Keypad/ecu_keypad.c: 78:         ret_val = a
      +                          ssign_pins(keypad);
  1920   001914  C035  F02A         	movff	keypad_init@keypad,assign_pins@ecu_keypad$F381@keypad
  1921   001918  ECF4  F008         	call	_assign_pins@ecu_keypad$F381	;wreg free
  1922   00191C  6E36               	movwf	keypad_init@ret_val^0,c
  1923   00191E                     
  1924                           ;ECUAL/Keypad/ecu_keypad.c: 79:         if (E_OK == ret_val)
  1925   00191E  0436               	decf	keypad_init@ret_val^0,w,c
  1926   001920  A4D8               	btfss	status,2,c
  1927   001922  EF95  F00C         	goto	u1871
  1928   001926  EF97  F00C         	goto	u1870
  1929   00192A                     u1871:
  1930   00192A  EFC1  F00C         	goto	l2889
  1931   00192E                     u1870:
  1932   00192E                     
  1933                           ;ECUAL/Keypad/ecu_keypad.c: 80:         {;ECUAL/Keypad/ecu_keypad.c: 81:             for
      +                           (counter = 0; counter < 4; counter++)
  1934   00192E  0E00               	movlw	0
  1935   001930  6E12               	movwf	_counter^0,c
  1936   001932                     l2867:
  1937   001932  0E03               	movlw	3
  1938   001934  6412               	cpfsgt	_counter^0,c
  1939   001936  EF9F  F00C         	goto	u1881
  1940   00193A  EFA1  F00C         	goto	u1880
  1941   00193E                     u1881:
  1942   00193E  EFA3  F00C         	goto	l2871
  1943   001942                     u1880:
  1944   001942  EFAC  F00C         	goto	l2877
  1945   001946                     l2871:
  1946                           
  1947                           ;ECUAL/Keypad/ecu_keypad.c: 82:                 ret_val = gpio_pin_initialize(&row_pins[
      +                          counter]);
  1948   001946  5012               	movf	_counter^0,w,c
  1949   001948  0F1D               	addlw	low _row_pins
  1950   00194A  6E33               	movwf	gpio_pin_initialize@_pin_config^0,c
  1951   00194C  EC41  F00D         	call	_gpio_pin_initialize	;wreg free
  1952   001950  6E36               	movwf	keypad_init@ret_val^0,c
  1953   001952  2A12               	incf	_counter^0,f,c
  1954   001954  EF99  F00C         	goto	l2867
  1955   001958                     l2877:
  1956                           
  1957                           ;ECUAL/Keypad/ecu_keypad.c: 84:             for (counter = 0; counter < 4; counter++)
  1958   001958  0E00               	movlw	0
  1959   00195A  6E12               	movwf	_counter^0,c
  1960   00195C                     l2879:
  1961   00195C  0E03               	movlw	3
  1962   00195E  6412               	cpfsgt	_counter^0,c
  1963   001960  EFB4  F00C         	goto	u1891
  1964   001964  EFB6  F00C         	goto	u1890
  1965   001968                     u1891:
  1966   001968  EFB8  F00C         	goto	l2883
  1967   00196C                     u1890:
  1968   00196C  EFC1  F00C         	goto	l2889
  1969   001970                     l2883:
  1970                           
  1971                           ;ECUAL/Keypad/ecu_keypad.c: 85:                 ret_val = gpio_pin_direction_initialize(
      +                          &column_pins[counter]);
  1972   001970  5012               	movf	_counter^0,w,c
  1973   001972  0F19               	addlw	low _column_pins
  1974   001974  6E2A               	movwf	gpio_pin_direction_initialize@_pin_config^0,c
  1975   001976  ECAB  F009         	call	_gpio_pin_direction_initialize	;wreg free
  1976   00197A  6E36               	movwf	keypad_init@ret_val^0,c
  1977   00197C  2A12               	incf	_counter^0,f,c
  1978   00197E  EFAE  F00C         	goto	l2879
  1979   001982                     l2889:
  1980                           
  1981                           ;ECUAL/Keypad/ecu_keypad.c: 89:     return ret_val;
  1982   001982  5036               	movf	keypad_init@ret_val^0,w,c
  1983   001984  0012               	return		;funcret
  1984   001986                     __end_of_keypad_init:
  1985                           	callstack 0
  1986                           
  1987 ;; *************** function _gpio_pin_initialize *****************
  1988 ;; Defined at:
  1989 ;;		line 134 in file "MCAL/GPIO/hal_gpio.c"
  1990 ;; Parameters:    Size  Location     Type
  1991 ;;  _pin_config     1    9[COMRAM] PTR struct .
  1992 ;;		 -> pins(4), relay_init@pin(1), led_initialize@pin_obj(1), row_pins(4), 
  1993 ;;		 -> pin_2(1), pin_1(1), rs_pin(1), enable_pin(1), 
  1994 ;;		 -> data_pins(4), 
  1995 ;; Auto vars:     Size  Location     Type
  1996 ;;  ret_State       1   10[COMRAM] enum E2813
  1997 ;; Return value:  Size  Location     Type
  1998 ;;                  1    wreg      enum E2813
  1999 ;; Registers used:
  2000 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2001 ;; Tracked objects:
  2002 ;;		On entry : 0/0
  2003 ;;		On exit  : 0/0
  2004 ;;		Unchanged: 0/0
  2005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2006 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2007 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2009 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2010 ;;Total ram usage:        2 bytes
  2011 ;; Hardware stack levels used: 1
  2012 ;; Hardware stack levels required when called: 1
  2013 ;; This function calls:
  2014 ;;		_gpio_pin_direction_initialize
  2015 ;;		_gpio_pin_write_logic
  2016 ;; This function is called by:
  2017 ;;		_lcd_init
  2018 ;;		_keypad_init
  2019 ;;		_dc_motor_init
  2020 ;;		_led_initialize
  2021 ;;		_relay_init
  2022 ;;		_segment_init
  2023 ;; This function uses a non-reentrant model
  2024 ;;
  2025                           
  2026                           	psect	text14
  2027   001A82                     __ptext14:
  2028                           	callstack 0
  2029   001A82                     _gpio_pin_initialize:
  2030                           	callstack 26
  2031   001A82                     
  2032                           ;MCAL/GPIO/hal_gpio.c: 134: Std_ReturnType gpio_pin_initialize (pin_config_t *_pin_confi
      +                          g);MCAL/GPIO/hal_gpio.c: 135: {;MCAL/GPIO/hal_gpio.c: 136:     Std_ReturnType ret_State 
      +                          = E_OK;
  2033   001A82  0E01               	movlw	1
  2034   001A84  6E34               	movwf	gpio_pin_initialize@ret_State^0,c
  2035   001A86                     
  2036                           ;MCAL/GPIO/hal_gpio.c: 138:     ret_State &= gpio_pin_direction_initialize (_pin_config)
      +                          ;
  2037   001A86  C033  F02A         	movff	gpio_pin_initialize@_pin_config,gpio_pin_direction_initialize@_pin_config
  2038   001A8A  ECAB  F009         	call	_gpio_pin_direction_initialize	;wreg free
  2039   001A8E  1634               	andwf	gpio_pin_initialize@ret_State^0,f,c
  2040   001A90                     
  2041                           ;MCAL/GPIO/hal_gpio.c: 139:     ret_State &= gpio_pin_write_logic (_pin_config, _pin_con
      +                          fig->logic);
  2042   001A90  C033  F02A         	movff	gpio_pin_initialize@_pin_config,gpio_pin_write_logic@_pin_config
  2043   001A94  5033               	movf	gpio_pin_initialize@_pin_config^0,w,c
  2044   001A96  6ED9               	movwf	fsr2l,c
  2045   001A98  6ADA               	clrf	fsr2h,c
  2046   001A9A  0E00               	movlw	0
  2047   001A9C  BEDF               	btfsc	indf2,7,c
  2048   001A9E  0E01               	movlw	1
  2049   001AA0  6E2B               	movwf	gpio_pin_write_logic@logic^0,c
  2050   001AA2  EC18  F008         	call	_gpio_pin_write_logic	;wreg free
  2051   001AA6  1634               	andwf	gpio_pin_initialize@ret_State^0,f,c
  2052                           
  2053                           ;MCAL/GPIO/hal_gpio.c: 141:     return ret_State;
  2054   001AA8  5034               	movf	gpio_pin_initialize@ret_State^0,w,c
  2055   001AAA  0012               	return		;funcret
  2056   001AAC                     __end_of_gpio_pin_initialize:
  2057                           	callstack 0
  2058                           
  2059 ;; *************** function _gpio_pin_write_logic *****************
  2060 ;; Defined at:
  2061 ;;		line 66 in file "MCAL/GPIO/hal_gpio.c"
  2062 ;; Parameters:    Size  Location     Type
  2063 ;;  _pin_config     1    0[COMRAM] PTR struct .
  2064 ;;		 -> ?_multiplex(1), pins(4), relay_turn_on@pin(1), relay_turn_off@pin(1), 
  2065 ;;		 -> relay_init@pin(1), led_turn_on@pin_obj(1), led_turn_off@pin_obj(1), led_initialize@pin_obj(1), 
  2066 ;;		 -> row_pins(4), pin_2(1), pin_1(1), rs_pin(1), 
  2067 ;;		 -> enable_pin(1), data_pins(4), 
  2068 ;;  logic           1    1[COMRAM] enum E2838
  2069 ;; Auto vars:     Size  Location     Type
  2070 ;;  ret_State       1    8[COMRAM] enum E2813
  2071 ;; Return value:  Size  Location     Type
  2072 ;;                  1    wreg      enum E2813
  2073 ;; Registers used:
  2074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2075 ;; Tracked objects:
  2076 ;;		On entry : 0/0
  2077 ;;		On exit  : 0/0
  2078 ;;		Unchanged: 0/0
  2079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2080 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2081 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2082 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2083 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2084 ;;Total ram usage:        9 bytes
  2085 ;; Hardware stack levels used: 1
  2086 ;; This function calls:
  2087 ;;		Nothing
  2088 ;; This function is called by:
  2089 ;;		_lcd_send_command
  2090 ;;		_lcd_send_data
  2091 ;;		_lcd_send_enable_signal
  2092 ;;		_lcd_send_bits
  2093 ;;		_keypad_read_button
  2094 ;;		_gpio_pin_initialize
  2095 ;;		_dc_motor_move_right
  2096 ;;		_dc_motor_move_left
  2097 ;;		_dc_motor_stop
  2098 ;;		_led_turn_off
  2099 ;;		_led_turn_on
  2100 ;;		_relay_turn_off
  2101 ;;		_relay_turn_on
  2102 ;;		_segment_write_number
  2103 ;;		_multiplex
  2104 ;; This function uses a non-reentrant model
  2105 ;;
  2106                           
  2107                           	psect	text15
  2108   001030                     __ptext15:
  2109                           	callstack 0
  2110   001030                     _gpio_pin_write_logic:
  2111                           	callstack 27
  2112   001030                     
  2113                           ;MCAL/GPIO/hal_gpio.c: 66: Std_ReturnType gpio_pin_write_logic (pin_config_t *_pin_confi
      +                          g, pin_logic_t logic);MCAL/GPIO/hal_gpio.c: 67: {;MCAL/GPIO/hal_gpio.c: 68:     Std_Retu
      +                          rnType ret_State = E_OK;
  2114   001030  0E01               	movlw	1
  2115   001032  6E32               	movwf	gpio_pin_write_logic@ret_State^0,c
  2116                           
  2117                           ;MCAL/GPIO/hal_gpio.c: 70:     if (((void*)0) == _pin_config || _pin_config->port_index 
      +                          > PORTE_INDEX || _pin_config->pin_index > PIN7)
  2118   001034  502A               	movf	gpio_pin_write_logic@_pin_config^0,w,c
  2119   001036  B4D8               	btfsc	status,2,c
  2120   001038  EF20  F008         	goto	u1601
  2121   00103C  EF22  F008         	goto	u1600
  2122   001040                     u1601:
  2123   001040  EF40  F008         	goto	l2647
  2124   001044                     u1600:
  2125   001044  502A               	movf	gpio_pin_write_logic@_pin_config^0,w,c
  2126   001046  6ED9               	movwf	fsr2l,c
  2127   001048  6ADA               	clrf	fsr2h,c
  2128   00104A  50DF               	movf	223,w,c
  2129   00104C  0B07               	andlw	7
  2130   00104E  6E2C               	movwf	??_gpio_pin_write_logic^0,c
  2131   001050  0E05               	movlw	5
  2132   001052  602C               	cpfslt	??_gpio_pin_write_logic^0,c
  2133   001054  EF2E  F008         	goto	u1611
  2134   001058  EF30  F008         	goto	u1610
  2135   00105C                     u1611:
  2136   00105C  EF40  F008         	goto	l2647
  2137   001060                     u1610:
  2138   001060  502A               	movf	gpio_pin_write_logic@_pin_config^0,w,c
  2139   001062  6ED9               	movwf	fsr2l,c
  2140   001064  6ADA               	clrf	fsr2h,c
  2141   001066  30DF               	rrcf	223,w,c
  2142   001068  32E8               	rrcf	wreg,f,c
  2143   00106A  32E8               	rrcf	wreg,f,c
  2144   00106C  0B07               	andlw	7
  2145   00106E  6E2C               	movwf	??_gpio_pin_write_logic^0,c
  2146   001070  0E07               	movlw	7
  2147   001072  642C               	cpfsgt	??_gpio_pin_write_logic^0,c
  2148   001074  EF3E  F008         	goto	u1621
  2149   001078  EF40  F008         	goto	u1620
  2150   00107C                     u1621:
  2151   00107C  EFA7  F008         	goto	l2655
  2152   001080                     u1620:
  2153   001080                     l2647:
  2154                           
  2155                           ;MCAL/GPIO/hal_gpio.c: 71:     {;MCAL/GPIO/hal_gpio.c: 72:         ret_State = E_NOT_OK;
  2156   001080  0E00               	movlw	0
  2157   001082  6E32               	movwf	gpio_pin_write_logic@ret_State^0,c
  2158                           
  2159                           ;MCAL/GPIO/hal_gpio.c: 73:     }
  2160   001084  EFF2  F008         	goto	l2659
  2161   001088                     l2649:
  2162                           
  2163                           ;MCAL/GPIO/hal_gpio.c: 79:                 ((*lat_regs[_pin_config->port_index]) &= ~(0x
      +                          01 << (_pin_config->pin_index)));
  2164   001088  502A               	movf	gpio_pin_write_logic@_pin_config^0,w,c
  2165   00108A  6ED9               	movwf	fsr2l,c
  2166   00108C  6ADA               	clrf	fsr2h,c
  2167   00108E  30DF               	rrcf	223,w,c
  2168   001090  32E8               	rrcf	wreg,f,c
  2169   001092  32E8               	rrcf	wreg,f,c
  2170   001094  0B07               	andlw	7
  2171   001096  6E2C               	movwf	??_gpio_pin_write_logic^0,c
  2172   001098  0E01               	movlw	1
  2173   00109A  6E2D               	movwf	(??_gpio_pin_write_logic+1)^0,c
  2174   00109C  2A2C               	incf	??_gpio_pin_write_logic^0,f,c
  2175   00109E  EF53  F008         	goto	u1634
  2176   0010A2                     u1635:
  2177   0010A2  90D8               	bcf	status,0,c
  2178   0010A4  362D               	rlcf	(??_gpio_pin_write_logic+1)^0,f,c
  2179   0010A6                     u1634:
  2180   0010A6  2E2C               	decfsz	??_gpio_pin_write_logic^0,f,c
  2181   0010A8  EF51  F008         	goto	u1635
  2182   0010AC  502D               	movf	(??_gpio_pin_write_logic+1)^0,w,c
  2183   0010AE  0AFF               	xorlw	255
  2184   0010B0  6E2E               	movwf	(??_gpio_pin_write_logic+2)^0,c
  2185   0010B2  502A               	movf	gpio_pin_write_logic@_pin_config^0,w,c
  2186   0010B4  6ED9               	movwf	fsr2l,c
  2187   0010B6  6ADA               	clrf	fsr2h,c
  2188   0010B8  50DF               	movf	223,w,c
  2189   0010BA  0B07               	andlw	7
  2190   0010BC  0D02               	mullw	2
  2191   0010BE  50F3               	movf	243,w,c
  2192   0010C0  0F1B               	addlw	low _lat_regs
  2193   0010C2  6E2F               	movwf	(??_gpio_pin_write_logic+3)^0,c
  2194   0010C4  C02F  FFF6         	movff	??_gpio_pin_write_logic+3,tblptrl
  2195   0010C8                     	if	1	;There is more than 1 active tblptr byte
  2196   0010C8  0E10               	movlw	high __smallconst
  2197   0010CA  6EF7               	movwf	tblptrh,c
  2198   0010CC                     	endif
  2199   0010CC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2200   0010CC  6AF8               	clrf	tblptru,c
  2201   0010CE                     	endif
  2202   0010CE                     	if	0	;tblptru may be non-zero
  2203   0010CE                     	endif
  2204   0010CE  0009               	tblrd		*+
  2205   0010D0  CFF5 F030          	movff	tablat,??_gpio_pin_write_logic+4
  2206   0010D4  0009               	tblrd		*+
  2207   0010D6  CFF5 F031          	movff	tablat,??_gpio_pin_write_logic+5
  2208   0010DA  C030  FFD9         	movff	??_gpio_pin_write_logic+4,fsr2l
  2209   0010DE  C031  FFDA         	movff	??_gpio_pin_write_logic+5,fsr2h
  2210   0010E2  502E               	movf	(??_gpio_pin_write_logic+2)^0,w,c
  2211   0010E4  16DF               	andwf	indf2,f,c
  2212                           
  2213                           ;MCAL/GPIO/hal_gpio.c: 80:                 break;
  2214   0010E6  EFBC  F008         	goto	l2657
  2215   0010EA                     l2651:
  2216                           
  2217                           ;MCAL/GPIO/hal_gpio.c: 83:                 ((*lat_regs[_pin_config->port_index]) |= (0x0
      +                          1 << (_pin_config->pin_index)));
  2218   0010EA  502A               	movf	gpio_pin_write_logic@_pin_config^0,w,c
  2219   0010EC  6ED9               	movwf	fsr2l,c
  2220   0010EE  6ADA               	clrf	fsr2h,c
  2221   0010F0  30DF               	rrcf	223,w,c
  2222   0010F2  32E8               	rrcf	wreg,f,c
  2223   0010F4  32E8               	rrcf	wreg,f,c
  2224   0010F6  0B07               	andlw	7
  2225   0010F8  6E2C               	movwf	??_gpio_pin_write_logic^0,c
  2226   0010FA  0E01               	movlw	1
  2227   0010FC  6E2D               	movwf	(??_gpio_pin_write_logic+1)^0,c
  2228   0010FE  2A2C               	incf	??_gpio_pin_write_logic^0,f,c
  2229   001100  EF84  F008         	goto	u1644
  2230   001104                     u1645:
  2231   001104  90D8               	bcf	status,0,c
  2232   001106  362D               	rlcf	(??_gpio_pin_write_logic+1)^0,f,c
  2233   001108                     u1644:
  2234   001108  2E2C               	decfsz	??_gpio_pin_write_logic^0,f,c
  2235   00110A  EF82  F008         	goto	u1645
  2236   00110E  502A               	movf	gpio_pin_write_logic@_pin_config^0,w,c
  2237   001110  6ED9               	movwf	fsr2l,c
  2238   001112  6ADA               	clrf	fsr2h,c
  2239   001114  50DF               	movf	223,w,c
  2240   001116  0B07               	andlw	7
  2241   001118  0D02               	mullw	2
  2242   00111A  50F3               	movf	243,w,c
  2243   00111C  0F1B               	addlw	low _lat_regs
  2244   00111E  6E2E               	movwf	(??_gpio_pin_write_logic+2)^0,c
  2245   001120  C02E  FFF6         	movff	??_gpio_pin_write_logic+2,tblptrl
  2246   001124                     	if	1	;There is more than 1 active tblptr byte
  2247   001124  0E10               	movlw	high __smallconst
  2248   001126  6EF7               	movwf	tblptrh,c
  2249   001128                     	endif
  2250   001128                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2251   001128  6AF8               	clrf	tblptru,c
  2252   00112A                     	endif
  2253   00112A                     	if	0	;tblptru may be non-zero
  2254   00112A                     	endif
  2255   00112A  0009               	tblrd		*+
  2256   00112C  CFF5 F02F          	movff	tablat,??_gpio_pin_write_logic+3
  2257   001130  0009               	tblrd		*+
  2258   001132  CFF5 F030          	movff	tablat,??_gpio_pin_write_logic+4
  2259   001136  C02F  FFD9         	movff	??_gpio_pin_write_logic+3,fsr2l
  2260   00113A  C030  FFDA         	movff	??_gpio_pin_write_logic+4,fsr2h
  2261   00113E  502D               	movf	(??_gpio_pin_write_logic+1)^0,w,c
  2262   001140  12DF               	iorwf	indf2,f,c
  2263                           
  2264                           ;MCAL/GPIO/hal_gpio.c: 84:                 break;
  2265   001142  EFBC  F008         	goto	l2657
  2266   001146                     l2653:
  2267                           
  2268                           ;MCAL/GPIO/hal_gpio.c: 87:                 ret_State = E_NOT_OK;
  2269   001146  0E00               	movlw	0
  2270   001148  6E32               	movwf	gpio_pin_write_logic@ret_State^0,c
  2271                           
  2272                           ;MCAL/GPIO/hal_gpio.c: 88:         }
  2273   00114A  EFBC  F008         	goto	l2657
  2274   00114E                     l2655:
  2275   00114E  502B               	movf	gpio_pin_write_logic@logic^0,w,c
  2276   001150  6E2C               	movwf	??_gpio_pin_write_logic^0,c
  2277   001152  6A2D               	clrf	(??_gpio_pin_write_logic+1)^0,c
  2278                           
  2279                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2280                           ; Switch size 1, requested type "simple"
  2281                           ; Number of cases is 1, Range of values is 0 to 0
  2282                           ; switch strategies available:
  2283                           ; Name         Instructions Cycles
  2284                           ; simple_byte            4     3 (average)
  2285                           ;	Chosen strategy is simple_byte
  2286   001154  502D               	movf	(??_gpio_pin_write_logic+1)^0,w,c
  2287   001156  0A00               	xorlw	0	; case 0
  2288   001158  B4D8               	btfsc	status,2,c
  2289   00115A  EFB1  F008         	goto	l3481
  2290   00115E  EFA3  F008         	goto	l2653
  2291   001162                     l3481:
  2292                           
  2293                           ; Switch size 1, requested type "simple"
  2294                           ; Number of cases is 2, Range of values is 0 to 1
  2295                           ; switch strategies available:
  2296                           ; Name         Instructions Cycles
  2297                           ; simple_byte            7     4 (average)
  2298                           ;	Chosen strategy is simple_byte
  2299   001162  502C               	movf	??_gpio_pin_write_logic^0,w,c
  2300   001164  0A00               	xorlw	0	; case 0
  2301   001166  B4D8               	btfsc	status,2,c
  2302   001168  EF44  F008         	goto	l2649
  2303   00116C  0A01               	xorlw	1	; case 1
  2304   00116E  B4D8               	btfsc	status,2,c
  2305   001170  EF75  F008         	goto	l2651
  2306   001174  EFA3  F008         	goto	l2653
  2307   001178                     l2657:
  2308                           
  2309                           ;MCAL/GPIO/hal_gpio.c: 89:         _pin_config->logic = (((*port_regs[_pin_config->port_
      +                          index]) >> (_pin_config->pin_index)) & 0x01);
  2310   001178  502A               	movf	gpio_pin_write_logic@_pin_config^0,w,c
  2311   00117A  6ED9               	movwf	fsr2l,c
  2312   00117C  6ADA               	clrf	fsr2h,c
  2313   00117E  30DF               	rrcf	223,w,c
  2314   001180  32E8               	rrcf	wreg,f,c
  2315   001182  32E8               	rrcf	wreg,f,c
  2316   001184  0B07               	andlw	7
  2317   001186  6E2C               	movwf	??_gpio_pin_write_logic^0,c
  2318   001188  502A               	movf	gpio_pin_write_logic@_pin_config^0,w,c
  2319   00118A  6ED9               	movwf	fsr2l,c
  2320   00118C  6ADA               	clrf	fsr2h,c
  2321   00118E  50DF               	movf	223,w,c
  2322   001190  0B07               	andlw	7
  2323   001192  0D02               	mullw	2
  2324   001194  50F3               	movf	243,w,c
  2325   001196  0F11               	addlw	low _port_regs
  2326   001198  6E2D               	movwf	(??_gpio_pin_write_logic+1)^0,c
  2327   00119A  C02D  FFF6         	movff	??_gpio_pin_write_logic+1,tblptrl
  2328   00119E                     	if	1	;There is more than 1 active tblptr byte
  2329   00119E  0E10               	movlw	high __smallconst
  2330   0011A0  6EF7               	movwf	tblptrh,c
  2331   0011A2                     	endif
  2332   0011A2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2333   0011A2  6AF8               	clrf	tblptru,c
  2334   0011A4                     	endif
  2335   0011A4                     	if	0	;tblptru may be non-zero
  2336   0011A4                     	endif
  2337   0011A4  0009               	tblrd		*+
  2338   0011A6  CFF5 F02E          	movff	tablat,??_gpio_pin_write_logic+2
  2339   0011AA  0009               	tblrd		*+
  2340   0011AC  CFF5 F02F          	movff	tablat,??_gpio_pin_write_logic+3
  2341   0011B0  C02E  FFD9         	movff	??_gpio_pin_write_logic+2,fsr2l
  2342   0011B4  C02F  FFDA         	movff	??_gpio_pin_write_logic+3,fsr2h
  2343   0011B8  50DF               	movf	indf2,w,c
  2344   0011BA  6E30               	movwf	(??_gpio_pin_write_logic+4)^0,c
  2345   0011BC  2A2C               	incf	??_gpio_pin_write_logic^0,f,c
  2346   0011BE  EFE3  F008         	goto	u1654
  2347   0011C2                     u1655:
  2348   0011C2  90D8               	bcf	status,0,c
  2349   0011C4  3230               	rrcf	(??_gpio_pin_write_logic+4)^0,f,c
  2350   0011C6                     u1654:
  2351   0011C6  2E2C               	decfsz	??_gpio_pin_write_logic^0,f,c
  2352   0011C8  EFE1  F008         	goto	u1655
  2353   0011CC  0E01               	movlw	1
  2354   0011CE  1630               	andwf	(??_gpio_pin_write_logic+4)^0,f,c
  2355   0011D0  502A               	movf	gpio_pin_write_logic@_pin_config^0,w,c
  2356   0011D2  6ED9               	movwf	fsr2l,c
  2357   0011D4  6ADA               	clrf	fsr2h,c
  2358   0011D6  3230               	rrcf	(??_gpio_pin_write_logic+4)^0,f,c
  2359   0011D8  3230               	rrcf	(??_gpio_pin_write_logic+4)^0,f,c
  2360   0011DA  50DF               	movf	223,w,c
  2361   0011DC  1830               	xorwf	(??_gpio_pin_write_logic+4)^0,w,c
  2362   0011DE  0B7F               	andlw	-129
  2363   0011E0  1830               	xorwf	(??_gpio_pin_write_logic+4)^0,w,c
  2364   0011E2  6EDF               	movwf	223,c
  2365   0011E4                     l2659:
  2366                           
  2367                           ;MCAL/GPIO/hal_gpio.c: 92:     return ret_State;
  2368   0011E4  5032               	movf	gpio_pin_write_logic@ret_State^0,w,c
  2369   0011E6  0012               	return		;funcret
  2370   0011E8                     __end_of_gpio_pin_write_logic:
  2371                           	callstack 0
  2372                           
  2373 ;; *************** function _gpio_pin_direction_initialize *****************
  2374 ;; Defined at:
  2375 ;;		line 15 in file "MCAL/GPIO/hal_gpio.c"
  2376 ;; Parameters:    Size  Location     Type
  2377 ;;  _pin_config     1    0[COMRAM] PTR const struct .
  2378 ;;		 -> pins(4), relay_init@pin(1), led_initialize@pin_obj(1), column_pins(4), 
  2379 ;;		 -> row_pins(4), pin_2(1), pin_1(1), rs_pin(1), 
  2380 ;;		 -> enable_pin(1), data_pins(4), button_init@pin(1), 
  2381 ;; Auto vars:     Size  Location     Type
  2382 ;;  ret_State       1    7[COMRAM] enum E2813
  2383 ;; Return value:  Size  Location     Type
  2384 ;;                  1    wreg      enum E2813
  2385 ;; Registers used:
  2386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2387 ;; Tracked objects:
  2388 ;;		On entry : 0/0
  2389 ;;		On exit  : 0/0
  2390 ;;		Unchanged: 0/0
  2391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2392 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2393 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2394 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2395 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2396 ;;Total ram usage:        8 bytes
  2397 ;; Hardware stack levels used: 1
  2398 ;; This function calls:
  2399 ;;		Nothing
  2400 ;; This function is called by:
  2401 ;;		_keypad_init
  2402 ;;		_gpio_pin_initialize
  2403 ;;		_button_init
  2404 ;;		_Interrupt_INTx_Pin_Init
  2405 ;; This function uses a non-reentrant model
  2406 ;;
  2407                           
  2408                           	psect	text16
  2409   001356                     __ptext16:
  2410                           	callstack 0
  2411   001356                     _gpio_pin_direction_initialize:
  2412                           	callstack 26
  2413   001356                     
  2414                           ;MCAL/GPIO/hal_gpio.c: 15: Std_ReturnType gpio_pin_direction_initialize (const pin_confi
      +                          g_t *_pin_config);MCAL/GPIO/hal_gpio.c: 16: {;MCAL/GPIO/hal_gpio.c: 17:     Std_ReturnTy
      +                          pe ret_State = E_OK;
  2415   001356  0E01               	movlw	1
  2416   001358  6E31               	movwf	gpio_pin_direction_initialize@ret_State^0,c
  2417                           
  2418                           ;MCAL/GPIO/hal_gpio.c: 19:     if (((void*)0) == _pin_config || _pin_config->port_index 
      +                          > PORTE_INDEX || _pin_config->pin_index > PIN7)
  2419   00135A  502A               	movf	gpio_pin_direction_initialize@_pin_config^0,w,c
  2420   00135C  B4D8               	btfsc	status,2,c
  2421   00135E  EFB3  F009         	goto	u1661
  2422   001362  EFB5  F009         	goto	u1660
  2423   001366                     u1661:
  2424   001366  EFD3  F009         	goto	l2685
  2425   00136A                     u1660:
  2426   00136A  502A               	movf	gpio_pin_direction_initialize@_pin_config^0,w,c
  2427   00136C  6ED9               	movwf	fsr2l,c
  2428   00136E  6ADA               	clrf	fsr2h,c
  2429   001370  50DF               	movf	223,w,c
  2430   001372  0B07               	andlw	7
  2431   001374  6E2B               	movwf	??_gpio_pin_direction_initialize^0,c
  2432   001376  0E05               	movlw	5
  2433   001378  602B               	cpfslt	??_gpio_pin_direction_initialize^0,c
  2434   00137A  EFC1  F009         	goto	u1671
  2435   00137E  EFC3  F009         	goto	u1670
  2436   001382                     u1671:
  2437   001382  EFD3  F009         	goto	l2685
  2438   001386                     u1670:
  2439   001386  502A               	movf	gpio_pin_direction_initialize@_pin_config^0,w,c
  2440   001388  6ED9               	movwf	fsr2l,c
  2441   00138A  6ADA               	clrf	fsr2h,c
  2442   00138C  30DF               	rrcf	223,w,c
  2443   00138E  32E8               	rrcf	wreg,f,c
  2444   001390  32E8               	rrcf	wreg,f,c
  2445   001392  0B07               	andlw	7
  2446   001394  6E2B               	movwf	??_gpio_pin_direction_initialize^0,c
  2447   001396  0E07               	movlw	7
  2448   001398  642B               	cpfsgt	??_gpio_pin_direction_initialize^0,c
  2449   00139A  EFD1  F009         	goto	u1681
  2450   00139E  EFD3  F009         	goto	u1680
  2451   0013A2                     u1681:
  2452   0013A2  EF36  F00A         	goto	l2693
  2453   0013A6                     u1680:
  2454   0013A6                     l2685:
  2455                           
  2456                           ;MCAL/GPIO/hal_gpio.c: 20:     {;MCAL/GPIO/hal_gpio.c: 21:         ret_State = E_NOT_OK;
  2457   0013A6  0E00               	movlw	0
  2458   0013A8  6E31               	movwf	gpio_pin_direction_initialize@ret_State^0,c
  2459                           
  2460                           ;MCAL/GPIO/hal_gpio.c: 22:     }
  2461   0013AA  EF56  F00A         	goto	l2695
  2462   0013AE                     l2687:
  2463                           
  2464                           ;MCAL/GPIO/hal_gpio.c: 28:                 ((*tris_regs[_pin_config->port_index]) &= ~(0
      +                          x01 << (_pin_config->pin_index)));
  2465   0013AE  502A               	movf	gpio_pin_direction_initialize@_pin_config^0,w,c
  2466   0013B0  6ED9               	movwf	fsr2l,c
  2467   0013B2  6ADA               	clrf	fsr2h,c
  2468   0013B4  30DF               	rrcf	223,w,c
  2469   0013B6  32E8               	rrcf	wreg,f,c
  2470   0013B8  32E8               	rrcf	wreg,f,c
  2471   0013BA  0B07               	andlw	7
  2472   0013BC  6E2B               	movwf	??_gpio_pin_direction_initialize^0,c
  2473   0013BE  0E01               	movlw	1
  2474   0013C0  6E2C               	movwf	(??_gpio_pin_direction_initialize+1)^0,c
  2475   0013C2  2A2B               	incf	??_gpio_pin_direction_initialize^0,f,c
  2476   0013C4  EFE6  F009         	goto	u1694
  2477   0013C8                     u1695:
  2478   0013C8  90D8               	bcf	status,0,c
  2479   0013CA  362C               	rlcf	(??_gpio_pin_direction_initialize+1)^0,f,c
  2480   0013CC                     u1694:
  2481   0013CC  2E2B               	decfsz	??_gpio_pin_direction_initialize^0,f,c
  2482   0013CE  EFE4  F009         	goto	u1695
  2483   0013D2  502C               	movf	(??_gpio_pin_direction_initialize+1)^0,w,c
  2484   0013D4  0AFF               	xorlw	255
  2485   0013D6  6E2D               	movwf	(??_gpio_pin_direction_initialize+2)^0,c
  2486   0013D8  502A               	movf	gpio_pin_direction_initialize@_pin_config^0,w,c
  2487   0013DA  6ED9               	movwf	fsr2l,c
  2488   0013DC  6ADA               	clrf	fsr2h,c
  2489   0013DE  50DF               	movf	223,w,c
  2490   0013E0  0B07               	andlw	7
  2491   0013E2  0D02               	mullw	2
  2492   0013E4  50F3               	movf	243,w,c
  2493   0013E6  0F25               	addlw	low _tris_regs
  2494   0013E8  6E2E               	movwf	(??_gpio_pin_direction_initialize+3)^0,c
  2495   0013EA  C02E  FFF6         	movff	??_gpio_pin_direction_initialize+3,tblptrl
  2496   0013EE                     	if	1	;There is more than 1 active tblptr byte
  2497   0013EE  0E10               	movlw	high __smallconst
  2498   0013F0  6EF7               	movwf	tblptrh,c
  2499   0013F2                     	endif
  2500   0013F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2501   0013F2  6AF8               	clrf	tblptru,c
  2502   0013F4                     	endif
  2503   0013F4                     	if	0	;tblptru may be non-zero
  2504   0013F4                     	endif
  2505   0013F4  0009               	tblrd		*+
  2506   0013F6  CFF5 F02F          	movff	tablat,??_gpio_pin_direction_initialize+4
  2507   0013FA  0009               	tblrd		*+
  2508   0013FC  CFF5 F030          	movff	tablat,??_gpio_pin_direction_initialize+5
  2509   001400  C02F  FFD9         	movff	??_gpio_pin_direction_initialize+4,fsr2l
  2510   001404  C030  FFDA         	movff	??_gpio_pin_direction_initialize+5,fsr2h
  2511   001408  502D               	movf	(??_gpio_pin_direction_initialize+2)^0,w,c
  2512   00140A  16DF               	andwf	indf2,f,c
  2513                           
  2514                           ;MCAL/GPIO/hal_gpio.c: 29:                 break;
  2515   00140C  EF56  F00A         	goto	l2695
  2516   001410                     l2689:
  2517                           
  2518                           ;MCAL/GPIO/hal_gpio.c: 32:                 ((*tris_regs[_pin_config->port_index]) |= (0x
      +                          01 << (_pin_config->pin_index)));
  2519   001410  502A               	movf	gpio_pin_direction_initialize@_pin_config^0,w,c
  2520   001412  6ED9               	movwf	fsr2l,c
  2521   001414  6ADA               	clrf	fsr2h,c
  2522   001416  30DF               	rrcf	223,w,c
  2523   001418  32E8               	rrcf	wreg,f,c
  2524   00141A  32E8               	rrcf	wreg,f,c
  2525   00141C  0B07               	andlw	7
  2526   00141E  6E2B               	movwf	??_gpio_pin_direction_initialize^0,c
  2527   001420  0E01               	movlw	1
  2528   001422  6E2C               	movwf	(??_gpio_pin_direction_initialize+1)^0,c
  2529   001424  2A2B               	incf	??_gpio_pin_direction_initialize^0,f,c
  2530   001426  EF17  F00A         	goto	u1704
  2531   00142A                     u1705:
  2532   00142A  90D8               	bcf	status,0,c
  2533   00142C  362C               	rlcf	(??_gpio_pin_direction_initialize+1)^0,f,c
  2534   00142E                     u1704:
  2535   00142E  2E2B               	decfsz	??_gpio_pin_direction_initialize^0,f,c
  2536   001430  EF15  F00A         	goto	u1705
  2537   001434  502A               	movf	gpio_pin_direction_initialize@_pin_config^0,w,c
  2538   001436  6ED9               	movwf	fsr2l,c
  2539   001438  6ADA               	clrf	fsr2h,c
  2540   00143A  50DF               	movf	223,w,c
  2541   00143C  0B07               	andlw	7
  2542   00143E  0D02               	mullw	2
  2543   001440  50F3               	movf	243,w,c
  2544   001442  0F25               	addlw	low _tris_regs
  2545   001444  6E2D               	movwf	(??_gpio_pin_direction_initialize+2)^0,c
  2546   001446  C02D  FFF6         	movff	??_gpio_pin_direction_initialize+2,tblptrl
  2547   00144A                     	if	1	;There is more than 1 active tblptr byte
  2548   00144A  0E10               	movlw	high __smallconst
  2549   00144C  6EF7               	movwf	tblptrh,c
  2550   00144E                     	endif
  2551   00144E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2552   00144E  6AF8               	clrf	tblptru,c
  2553   001450                     	endif
  2554   001450                     	if	0	;tblptru may be non-zero
  2555   001450                     	endif
  2556   001450  0009               	tblrd		*+
  2557   001452  CFF5 F02E          	movff	tablat,??_gpio_pin_direction_initialize+3
  2558   001456  0009               	tblrd		*+
  2559   001458  CFF5 F02F          	movff	tablat,??_gpio_pin_direction_initialize+4
  2560   00145C  C02E  FFD9         	movff	??_gpio_pin_direction_initialize+3,fsr2l
  2561   001460  C02F  FFDA         	movff	??_gpio_pin_direction_initialize+4,fsr2h
  2562   001464  502C               	movf	(??_gpio_pin_direction_initialize+1)^0,w,c
  2563   001466  12DF               	iorwf	indf2,f,c
  2564                           
  2565                           ;MCAL/GPIO/hal_gpio.c: 33:                 break;
  2566   001468  EF56  F00A         	goto	l2695
  2567   00146C                     l2693:
  2568   00146C  502A               	movf	gpio_pin_direction_initialize@_pin_config^0,w,c
  2569   00146E  6ED9               	movwf	fsr2l,c
  2570   001470  6ADA               	clrf	fsr2h,c
  2571   001472  BCDF               	btfsc	indf2,6,c
  2572   001474  EF3E  F00A         	goto	u1711
  2573   001478  EF41  F00A         	goto	u1710
  2574   00147C                     u1711:
  2575   00147C  0E01               	movlw	1
  2576   00147E  EF42  F00A         	goto	u1720
  2577   001482                     u1710:
  2578   001482  0E00               	movlw	0
  2579   001484                     u1720:
  2580   001484  6E2B               	movwf	??_gpio_pin_direction_initialize^0,c
  2581   001486  6A2C               	clrf	(??_gpio_pin_direction_initialize+1)^0,c
  2582                           
  2583                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2584                           ; Switch size 1, requested type "simple"
  2585                           ; Number of cases is 1, Range of values is 0 to 0
  2586                           ; switch strategies available:
  2587                           ; Name         Instructions Cycles
  2588                           ; simple_byte            4     3 (average)
  2589                           ;	Chosen strategy is simple_byte
  2590   001488  502C               	movf	(??_gpio_pin_direction_initialize+1)^0,w,c
  2591   00148A  0A00               	xorlw	0	; case 0
  2592   00148C  B4D8               	btfsc	status,2,c
  2593   00148E  EF4B  F00A         	goto	l3483
  2594   001492  EFD3  F009         	goto	l2685
  2595   001496                     l3483:
  2596                           
  2597                           ; Switch size 1, requested type "simple"
  2598                           ; Number of cases is 2, Range of values is 0 to 1
  2599                           ; switch strategies available:
  2600                           ; Name         Instructions Cycles
  2601                           ; simple_byte            7     4 (average)
  2602                           ;	Chosen strategy is simple_byte
  2603   001496  502B               	movf	??_gpio_pin_direction_initialize^0,w,c
  2604   001498  0A00               	xorlw	0	; case 0
  2605   00149A  B4D8               	btfsc	status,2,c
  2606   00149C  EFD7  F009         	goto	l2687
  2607   0014A0  0A01               	xorlw	1	; case 1
  2608   0014A2  B4D8               	btfsc	status,2,c
  2609   0014A4  EF08  F00A         	goto	l2689
  2610   0014A8  EFD3  F009         	goto	l2685
  2611   0014AC                     l2695:
  2612                           
  2613                           ;MCAL/GPIO/hal_gpio.c: 40:     return ret_State;
  2614   0014AC  5031               	movf	gpio_pin_direction_initialize@ret_State^0,w,c
  2615   0014AE  0012               	return		;funcret
  2616   0014B0                     __end_of_gpio_pin_direction_initialize:
  2617                           	callstack 0
  2618                           
  2619 ;; *************** function _assign_pins@ecu_keypad$F381 *****************
  2620 ;; Defined at:
  2621 ;;		line 29 in file "ECUAL/Keypad/ecu_keypad.c"
  2622 ;; Parameters:    Size  Location     Type
  2623 ;;  keypad          1    0[COMRAM] const PTR const struct .
  2624 ;;		 -> keypad(9), 
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;  ret_val         1    3[COMRAM] enum E2813
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  1    wreg      enum E2813
  2629 ;; Registers used:
  2630 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2631 ;; Tracked objects:
  2632 ;;		On entry : 0/0
  2633 ;;		On exit  : 0/0
  2634 ;;		Unchanged: 0/0
  2635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2636 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2637 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2638 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2639 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2640 ;;Total ram usage:        4 bytes
  2641 ;; Hardware stack levels used: 1
  2642 ;; This function calls:
  2643 ;;		Nothing
  2644 ;; This function is called by:
  2645 ;;		_keypad_init
  2646 ;;		_keypad_read_button
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650                           	psect	text17
  2651   0011E8                     __ptext17:
  2652                           	callstack 0
  2653   0011E8                     _assign_pins@ecu_keypad$F381:
  2654                           	callstack 29
  2655   0011E8                     
  2656                           ;ECUAL/Keypad/ecu_keypad.c: 29: static Std_ReturnType assign_pins(const keypad_t *const 
      +                          keypad);ECUAL/Keypad/ecu_keypad.c: 30: {;ECUAL/Keypad/ecu_keypad.c: 31:     Std_ReturnTy
      +                          pe ret_val = E_OK;
  2657   0011E8  0E01               	movlw	1
  2658   0011EA  6E2D               	movwf	assign_pins@ecu_keypad$F381@ret_val^0,c
  2659                           
  2660                           ;ECUAL/Keypad/ecu_keypad.c: 33:     switch (keypad->keypad_type)
  2661   0011EC  EF08  F009         	goto	l2791
  2662   0011F0                     l2785:
  2663                           
  2664                           ;ECUAL/Keypad/ecu_keypad.c: 36:             disable_logic = GPIO_LOW;
  2665   0011F0  0E00               	movlw	0
  2666   0011F2  6E10               	movwf	_disable_logic^0,c
  2667                           
  2668                           ;ECUAL/Keypad/ecu_keypad.c: 37:             enable_logic = GPIO_HIGH;
  2669   0011F4  0E01               	movlw	1
  2670   0011F6  6E11               	movwf	_enable_logic^0,c
  2671                           
  2672                           ;ECUAL/Keypad/ecu_keypad.c: 38:             break;
  2673   0011F8  EF22  F009         	goto	l2793
  2674   0011FC                     l2787:
  2675                           
  2676                           ;ECUAL/Keypad/ecu_keypad.c: 40:             disable_logic = GPIO_HIGH;
  2677   0011FC  0E01               	movlw	1
  2678   0011FE  6E10               	movwf	_disable_logic^0,c
  2679                           
  2680                           ;ECUAL/Keypad/ecu_keypad.c: 41:             enable_logic = GPIO_LOW;
  2681   001200  0E00               	movlw	0
  2682   001202  6E11               	movwf	_enable_logic^0,c
  2683                           
  2684                           ;ECUAL/Keypad/ecu_keypad.c: 42:             break;
  2685   001204  EF22  F009         	goto	l2793
  2686   001208                     l2789:
  2687                           
  2688                           ;ECUAL/Keypad/ecu_keypad.c: 44:             ret_val = E_NOT_OK;
  2689   001208  0E00               	movlw	0
  2690   00120A  6E2D               	movwf	assign_pins@ecu_keypad$F381@ret_val^0,c
  2691                           
  2692                           ;ECUAL/Keypad/ecu_keypad.c: 45:     }
  2693   00120C  EF22  F009         	goto	l2793
  2694   001210                     l2791:
  2695   001210  502A               	movf	assign_pins@ecu_keypad$F381@keypad^0,w,c
  2696   001212  6ED9               	movwf	fsr2l,c
  2697   001214  6ADA               	clrf	fsr2h,c
  2698   001216  0E08               	movlw	8
  2699   001218  26D9               	addwf	fsr2l,f,c
  2700   00121A  50DF               	movf	indf2,w,c
  2701   00121C  6E2B               	movwf	??_assign_pins@ecu_keypad$F381^0,c
  2702   00121E  6A2C               	clrf	(??_assign_pins@ecu_keypad$F381+1)^0,c
  2703                           
  2704                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2705                           ; Switch size 1, requested type "simple"
  2706                           ; Number of cases is 1, Range of values is 0 to 0
  2707                           ; switch strategies available:
  2708                           ; Name         Instructions Cycles
  2709                           ; simple_byte            4     3 (average)
  2710                           ;	Chosen strategy is simple_byte
  2711   001220  502C               	movf	(??_assign_pins@ecu_keypad$F381+1)^0,w,c
  2712   001222  0A00               	xorlw	0	; case 0
  2713   001224  B4D8               	btfsc	status,2,c
  2714   001226  EF17  F009         	goto	l3485
  2715   00122A  EF04  F009         	goto	l2789
  2716   00122E                     l3485:
  2717                           
  2718                           ; Switch size 1, requested type "simple"
  2719                           ; Number of cases is 2, Range of values is 0 to 1
  2720                           ; switch strategies available:
  2721                           ; Name         Instructions Cycles
  2722                           ; simple_byte            7     4 (average)
  2723                           ;	Chosen strategy is simple_byte
  2724   00122E  502B               	movf	??_assign_pins@ecu_keypad$F381^0,w,c
  2725   001230  0A00               	xorlw	0	; case 0
  2726   001232  B4D8               	btfsc	status,2,c
  2727   001234  EFFE  F008         	goto	l2787
  2728   001238  0A01               	xorlw	1	; case 1
  2729   00123A  B4D8               	btfsc	status,2,c
  2730   00123C  EFF8  F008         	goto	l2785
  2731   001240  EF04  F009         	goto	l2789
  2732   001244                     l2793:
  2733                           
  2734                           ;ECUAL/Keypad/ecu_keypad.c: 47:     if (E_OK == ret_val)
  2735   001244  042D               	decf	assign_pins@ecu_keypad$F381@ret_val^0,w,c
  2736   001246  A4D8               	btfss	status,2,c
  2737   001248  EF28  F009         	goto	u1801
  2738   00124C  EF2A  F009         	goto	u1800
  2739   001250                     u1801:
  2740   001250  EFA9  F009         	goto	l2819
  2741   001254                     u1800:
  2742   001254                     
  2743                           ;ECUAL/Keypad/ecu_keypad.c: 48:     {;ECUAL/Keypad/ecu_keypad.c: 49:         for (counte
      +                          r = 0; counter < 4; counter++)
  2744   001254  0E00               	movlw	0
  2745   001256  6E12               	movwf	_counter^0,c
  2746   001258                     l2797:
  2747   001258  0E03               	movlw	3
  2748   00125A  6412               	cpfsgt	_counter^0,c
  2749   00125C  EF32  F009         	goto	u1811
  2750   001260  EF34  F009         	goto	u1810
  2751   001264                     u1811:
  2752   001264  EF36  F009         	goto	l2801
  2753   001268                     u1810:
  2754   001268  EF6C  F009         	goto	l2807
  2755   00126C                     l2801:
  2756                           
  2757                           ;ECUAL/Keypad/ecu_keypad.c: 50:         {;ECUAL/Keypad/ecu_keypad.c: 51:             row
      +                          _pins[counter].port_index = keypad->keypad_row_pins[counter].port_index;
  2758   00126C  502A               	movf	assign_pins@ecu_keypad$F381@keypad^0,w,c
  2759   00126E  2412               	addwf	_counter^0,w,c
  2760   001270  6ED9               	movwf	fsr2l,c
  2761   001272  6ADA               	clrf	fsr2h,c
  2762   001274  50DF               	movf	223,w,c
  2763   001276  0B07               	andlw	7
  2764   001278  6E2B               	movwf	??_assign_pins@ecu_keypad$F381^0,c
  2765   00127A  5012               	movf	_counter^0,w,c
  2766   00127C  0F1D               	addlw	low _row_pins
  2767   00127E  6ED9               	movwf	fsr2l,c
  2768   001280  6ADA               	clrf	fsr2h,c
  2769   001282  50DF               	movf	223,w,c
  2770   001284  182B               	xorwf	??_assign_pins@ecu_keypad$F381^0,w,c
  2771   001286  0BF8               	andlw	-8
  2772   001288  182B               	xorwf	??_assign_pins@ecu_keypad$F381^0,w,c
  2773   00128A  6EDF               	movwf	223,c
  2774                           
  2775                           ;ECUAL/Keypad/ecu_keypad.c: 52:             row_pins[counter].pin_index = keypad->keypad
      +                          _row_pins[counter].pin_index;
  2776   00128C  502A               	movf	assign_pins@ecu_keypad$F381@keypad^0,w,c
  2777   00128E  2412               	addwf	_counter^0,w,c
  2778   001290  6ED9               	movwf	fsr2l,c
  2779   001292  6ADA               	clrf	fsr2h,c
  2780   001294  30DF               	rrcf	223,w,c
  2781   001296  32E8               	rrcf	wreg,f,c
  2782   001298  32E8               	rrcf	wreg,f,c
  2783   00129A  0B07               	andlw	7
  2784   00129C  6E2B               	movwf	??_assign_pins@ecu_keypad$F381^0,c
  2785   00129E  5012               	movf	_counter^0,w,c
  2786   0012A0  0F1D               	addlw	low _row_pins
  2787   0012A2  6ED9               	movwf	fsr2l,c
  2788   0012A4  6ADA               	clrf	fsr2h,c
  2789   0012A6  462B               	rlncf	??_assign_pins@ecu_keypad$F381^0,f,c
  2790   0012A8  462B               	rlncf	??_assign_pins@ecu_keypad$F381^0,f,c
  2791   0012AA  462B               	rlncf	??_assign_pins@ecu_keypad$F381^0,f,c
  2792   0012AC  50DF               	movf	223,w,c
  2793   0012AE  182B               	xorwf	??_assign_pins@ecu_keypad$F381^0,w,c
  2794   0012B0  0BC7               	andlw	-57
  2795   0012B2  182B               	xorwf	??_assign_pins@ecu_keypad$F381^0,w,c
  2796   0012B4  6EDF               	movwf	223,c
  2797                           
  2798                           ;ECUAL/Keypad/ecu_keypad.c: 53:             row_pins[counter].pin_direction = GPIO_OUTPU
      +                          T;
  2799   0012B6  5012               	movf	_counter^0,w,c
  2800   0012B8  0F1D               	addlw	low _row_pins
  2801   0012BA  6ED9               	movwf	fsr2l,c
  2802   0012BC  6ADA               	clrf	fsr2h,c
  2803   0012BE  9CDF               	bcf	indf2,6,c
  2804                           
  2805                           ;ECUAL/Keypad/ecu_keypad.c: 54:             row_pins[counter].logic = disable_logic;
  2806   0012C0  5012               	movf	_counter^0,w,c
  2807   0012C2  0F1D               	addlw	low _row_pins
  2808   0012C4  6ED9               	movwf	fsr2l,c
  2809   0012C6  6ADA               	clrf	fsr2h,c
  2810   0012C8  B010               	btfsc	_disable_logic^0,0,c
  2811   0012CA  D002               	bra	u1825
  2812   0012CC  9EDF               	bcf	indf2,7,c
  2813   0012CE  D001               	bra	u1826
  2814   0012D0                     u1825:
  2815   0012D0  8EDF               	bsf	indf2,7,c
  2816   0012D2                     u1826:
  2817   0012D2                     
  2818                           ;ECUAL/Keypad/ecu_keypad.c: 55:         }
  2819   0012D2  2A12               	incf	_counter^0,f,c
  2820   0012D4  EF2C  F009         	goto	l2797
  2821   0012D8                     l2807:
  2822                           
  2823                           ;ECUAL/Keypad/ecu_keypad.c: 57:         for (counter = 0; counter < 4; counter++)
  2824   0012D8  0E00               	movlw	0
  2825   0012DA  6E12               	movwf	_counter^0,c
  2826   0012DC                     l2809:
  2827   0012DC  0E03               	movlw	3
  2828   0012DE  6412               	cpfsgt	_counter^0,c
  2829   0012E0  EF74  F009         	goto	u1831
  2830   0012E4  EF76  F009         	goto	u1830
  2831   0012E8                     u1831:
  2832   0012E8  EF78  F009         	goto	l2813
  2833   0012EC                     u1830:
  2834   0012EC  EFA9  F009         	goto	l2819
  2835   0012F0                     l2813:
  2836                           
  2837                           ;ECUAL/Keypad/ecu_keypad.c: 58:         {;ECUAL/Keypad/ecu_keypad.c: 59:             col
      +                          umn_pins[counter].port_index = keypad->keypad_column_pins[counter].port_index;
  2838   0012F0  502A               	movf	assign_pins@ecu_keypad$F381@keypad^0,w,c
  2839   0012F2  2412               	addwf	_counter^0,w,c
  2840   0012F4  6ED9               	movwf	fsr2l,c
  2841   0012F6  6ADA               	clrf	fsr2h,c
  2842   0012F8  0E04               	movlw	4
  2843   0012FA  26D9               	addwf	fsr2l,f,c
  2844   0012FC  50DF               	movf	223,w,c
  2845   0012FE  0B07               	andlw	7
  2846   001300  6E2B               	movwf	??_assign_pins@ecu_keypad$F381^0,c
  2847   001302  5012               	movf	_counter^0,w,c
  2848   001304  0F19               	addlw	low _column_pins
  2849   001306  6ED9               	movwf	fsr2l,c
  2850   001308  6ADA               	clrf	fsr2h,c
  2851   00130A  50DF               	movf	223,w,c
  2852   00130C  182B               	xorwf	??_assign_pins@ecu_keypad$F381^0,w,c
  2853   00130E  0BF8               	andlw	-8
  2854   001310  182B               	xorwf	??_assign_pins@ecu_keypad$F381^0,w,c
  2855   001312  6EDF               	movwf	223,c
  2856                           
  2857                           ;ECUAL/Keypad/ecu_keypad.c: 60:             column_pins[counter].pin_index = keypad->key
      +                          pad_column_pins[counter].pin_index;
  2858   001314  502A               	movf	assign_pins@ecu_keypad$F381@keypad^0,w,c
  2859   001316  2412               	addwf	_counter^0,w,c
  2860   001318  6ED9               	movwf	fsr2l,c
  2861   00131A  6ADA               	clrf	fsr2h,c
  2862   00131C  0E04               	movlw	4
  2863   00131E  26D9               	addwf	fsr2l,f,c
  2864   001320  30DF               	rrcf	223,w,c
  2865   001322  32E8               	rrcf	wreg,f,c
  2866   001324  32E8               	rrcf	wreg,f,c
  2867   001326  0B07               	andlw	7
  2868   001328  6E2B               	movwf	??_assign_pins@ecu_keypad$F381^0,c
  2869   00132A  5012               	movf	_counter^0,w,c
  2870   00132C  0F19               	addlw	low _column_pins
  2871   00132E  6ED9               	movwf	fsr2l,c
  2872   001330  6ADA               	clrf	fsr2h,c
  2873   001332  462B               	rlncf	??_assign_pins@ecu_keypad$F381^0,f,c
  2874   001334  462B               	rlncf	??_assign_pins@ecu_keypad$F381^0,f,c
  2875   001336  462B               	rlncf	??_assign_pins@ecu_keypad$F381^0,f,c
  2876   001338  50DF               	movf	223,w,c
  2877   00133A  182B               	xorwf	??_assign_pins@ecu_keypad$F381^0,w,c
  2878   00133C  0BC7               	andlw	-57
  2879   00133E  182B               	xorwf	??_assign_pins@ecu_keypad$F381^0,w,c
  2880   001340  6EDF               	movwf	223,c
  2881                           
  2882                           ;ECUAL/Keypad/ecu_keypad.c: 61:             column_pins[counter].pin_direction = GPIO_IN
      +                          PUT;
  2883   001342  5012               	movf	_counter^0,w,c
  2884   001344  0F19               	addlw	low _column_pins
  2885   001346  6ED9               	movwf	fsr2l,c
  2886   001348  6ADA               	clrf	fsr2h,c
  2887   00134A  8CDF               	bsf	indf2,6,c
  2888   00134C                     
  2889                           ;ECUAL/Keypad/ecu_keypad.c: 62:         }
  2890   00134C  2A12               	incf	_counter^0,f,c
  2891   00134E  EF6E  F009         	goto	l2809
  2892   001352                     l2819:
  2893                           
  2894                           ;ECUAL/Keypad/ecu_keypad.c: 65:     return ret_val;
  2895   001352  502D               	movf	assign_pins@ecu_keypad$F381@ret_val^0,w,c
  2896   001354  0012               	return		;funcret
  2897   001356                     __end_of_assign_pins@ecu_keypad$F381:
  2898                           	callstack 0
  2899                           
  2900                           	psect	rparam
  2901   000000                     
  2902                           	psect	idloc
  2903                           
  2904                           ;Config register IDLOC0 @ 0x200000
  2905                           ;	unspecified, using default values
  2906   200000                     	org	2097152
  2907   200000  FF                 	db	255
  2908                           
  2909                           ;Config register IDLOC1 @ 0x200001
  2910                           ;	unspecified, using default values
  2911   200001                     	org	2097153
  2912   200001  FF                 	db	255
  2913                           
  2914                           ;Config register IDLOC2 @ 0x200002
  2915                           ;	unspecified, using default values
  2916   200002                     	org	2097154
  2917   200002  FF                 	db	255
  2918                           
  2919                           ;Config register IDLOC3 @ 0x200003
  2920                           ;	unspecified, using default values
  2921   200003                     	org	2097155
  2922   200003  FF                 	db	255
  2923                           
  2924                           ;Config register IDLOC4 @ 0x200004
  2925                           ;	unspecified, using default values
  2926   200004                     	org	2097156
  2927   200004  FF                 	db	255
  2928                           
  2929                           ;Config register IDLOC5 @ 0x200005
  2930                           ;	unspecified, using default values
  2931   200005                     	org	2097157
  2932   200005  FF                 	db	255
  2933                           
  2934                           ;Config register IDLOC6 @ 0x200006
  2935                           ;	unspecified, using default values
  2936   200006                     	org	2097158
  2937   200006  FF                 	db	255
  2938                           
  2939                           ;Config register IDLOC7 @ 0x200007
  2940                           ;	unspecified, using default values
  2941   200007                     	org	2097159
  2942   200007  FF                 	db	255
  2943                           
  2944                           	psect	config
  2945                           
  2946                           ; Padding undefined space
  2947   300000                     	org	3145728
  2948   300000  FF                 	db	255
  2949                           
  2950                           ;Config register CONFIG1H @ 0x300001
  2951                           ;	Oscillator Selection bits
  2952                           ;	OSC = HS, HS oscillator
  2953                           ;	Fail-Safe Clock Monitor Enable bit
  2954                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2955                           ;	Internal/External Oscillator Switchover bit
  2956                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2957   300001                     	org	3145729
  2958   300001  02                 	db	2
  2959                           
  2960                           ;Config register CONFIG2L @ 0x300002
  2961                           ;	Power-up Timer Enable bit
  2962                           ;	PWRT = OFF, PWRT disabled
  2963                           ;	Brown-out Reset Enable bits
  2964                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  2965                           ;	Brown Out Reset Voltage bits
  2966                           ;	BORV = 1, 
  2967   300002                     	org	3145730
  2968   300002  09                 	db	9
  2969                           
  2970                           ;Config register CONFIG2H @ 0x300003
  2971                           ;	Watchdog Timer Enable bit
  2972                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  2973                           ;	Watchdog Timer Postscale Select bits
  2974                           ;	WDTPS = 32768, 1:32768
  2975   300003                     	org	3145731
  2976   300003  1E                 	db	30
  2977                           
  2978                           ; Padding undefined space
  2979   300004                     	org	3145732
  2980   300004  FF                 	db	255
  2981                           
  2982                           ;Config register CONFIG3H @ 0x300005
  2983                           ;	CCP2 MUX bit
  2984                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  2985                           ;	PORTB A/D Enable bit
  2986                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  2987                           ;	Low-Power Timer1 Oscillator Enable bit
  2988                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2989                           ;	MCLR Pin Enable bit
  2990                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2991   300005                     	org	3145733
  2992   300005  81                 	db	129
  2993                           
  2994                           ;Config register CONFIG4L @ 0x300006
  2995                           ;	Stack Full/Underflow Reset Enable bit
  2996                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2997                           ;	Single-Supply ICSP Enable bit
  2998                           ;	LVP = OFF, Single-Supply ICSP disabled
  2999                           ;	Extended Instruction Set Enable bit
  3000                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3001                           ;	Background Debugger Enable bit
  3002                           ;	DEBUG = 0x1, unprogrammed default
  3003   300006                     	org	3145734
  3004   300006  81                 	db	129
  3005                           
  3006                           ; Padding undefined space
  3007   300007                     	org	3145735
  3008   300007  FF                 	db	255
  3009                           
  3010                           ;Config register CONFIG5L @ 0x300008
  3011                           ;	Code Protection bit
  3012                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  3013                           ;	Code Protection bit
  3014                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  3015                           ;	Code Protection bit
  3016                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  3017                           ;	Code Protection bit
  3018                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  3019   300008                     	org	3145736
  3020   300008  0F                 	db	15
  3021                           
  3022                           ;Config register CONFIG5H @ 0x300009
  3023                           ;	Boot Block Code Protection bit
  3024                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  3025                           ;	Data EEPROM Code Protection bit
  3026                           ;	CPD = OFF, Data EEPROM not code-protected
  3027   300009                     	org	3145737
  3028   300009  C0                 	db	192
  3029                           
  3030                           ;Config register CONFIG6L @ 0x30000A
  3031                           ;	Write Protection bit
  3032                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  3033                           ;	Write Protection bit
  3034                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  3035                           ;	Write Protection bit
  3036                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  3037                           ;	Write Protection bit
  3038                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  3039   30000A                     	org	3145738
  3040   30000A  0F                 	db	15
  3041                           
  3042                           ;Config register CONFIG6H @ 0x30000B
  3043                           ;	Configuration Register Write Protection bit
  3044                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3045                           ;	Boot Block Write Protection bit
  3046                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  3047                           ;	Data EEPROM Write Protection bit
  3048                           ;	WRTD = OFF, Data EEPROM not write-protected
  3049   30000B                     	org	3145739
  3050   30000B  E0                 	db	224
  3051                           
  3052                           ;Config register CONFIG7L @ 0x30000C
  3053                           ;	Table Read Protection bit
  3054                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  3055                           ;	Table Read Protection bit
  3056                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3057                           ;	Table Read Protection bit
  3058                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  3059                           ;	Table Read Protection bit
  3060                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  3061   30000C                     	org	3145740
  3062   30000C  0F                 	db	15
  3063                           
  3064                           ;Config register CONFIG7H @ 0x30000D
  3065                           ;	Boot Block Table Read Protection bit
  3066                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3067   30000D                     	org	3145741
  3068   30000D  40                 	db	64
  3069                           tosu	equ	0xFFF
  3070                           tosh	equ	0xFFE
  3071                           tosl	equ	0xFFD
  3072                           stkptr	equ	0xFFC
  3073                           pclatu	equ	0xFFB
  3074                           pclath	equ	0xFFA
  3075                           pcl	equ	0xFF9
  3076                           tblptru	equ	0xFF8
  3077                           tblptrh	equ	0xFF7
  3078                           tblptrl	equ	0xFF6
  3079                           tablat	equ	0xFF5
  3080                           prodh	equ	0xFF4
  3081                           prodl	equ	0xFF3
  3082                           indf0	equ	0xFEF
  3083                           postinc0	equ	0xFEE
  3084                           postdec0	equ	0xFED
  3085                           preinc0	equ	0xFEC
  3086                           plusw0	equ	0xFEB
  3087                           fsr0h	equ	0xFEA
  3088                           fsr0l	equ	0xFE9
  3089                           wreg	equ	0xFE8
  3090                           indf1	equ	0xFE7
  3091                           postinc1	equ	0xFE6
  3092                           postdec1	equ	0xFE5
  3093                           preinc1	equ	0xFE4
  3094                           plusw1	equ	0xFE3
  3095                           fsr1h	equ	0xFE2
  3096                           fsr1l	equ	0xFE1
  3097                           bsr	equ	0xFE0
  3098                           indf2	equ	0xFDF
  3099                           postinc2	equ	0xFDE
  3100                           postdec2	equ	0xFDD
  3101                           preinc2	equ	0xFDC
  3102                           plusw2	equ	0xFDB
  3103                           fsr2h	equ	0xFDA
  3104                           fsr2l	equ	0xFD9
  3105                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    46
    Data        15
    BSS         41
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     25      82
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    assign_pins@ecu_keypad$F381@keypad	const PTR const struct . size(1) Largest target is 9
		 -> keypad(COMRAM[9]), 

    gpio_pin_direction_initialize@_pin_config	PTR const struct . size(1) Largest target is 4
		 -> button_init@pin(COMRAM[1]), column_pins(COMRAM[4]), data_pins(COMRAM[4]), enable_pin(COMRAM[1]), 
		 -> led_initialize@pin_obj(COMRAM[1]), pin_1(COMRAM[1]), pin_2(COMRAM[1]), pins(COMRAM[4]), 
		 -> relay_init@pin(COMRAM[1]), row_pins(COMRAM[4]), rs_pin(COMRAM[1]), 

    gpio_pin_initialize@_pin_config	PTR struct . size(1) Largest target is 4
		 -> data_pins(COMRAM[4]), enable_pin(COMRAM[1]), led_initialize@pin_obj(COMRAM[1]), pin_1(COMRAM[1]), 
		 -> pin_2(COMRAM[1]), pins(COMRAM[4]), relay_init@pin(COMRAM[1]), row_pins(COMRAM[4]), 
		 -> rs_pin(COMRAM[1]), 

    gpio_pin_read_logic@_pin_config	PTR const struct . size(1) Largest target is 4
		 -> button_read_state@pin(COMRAM[1]), column_pins(COMRAM[4]), 

    gpio_pin_read_logic@logic	PTR enum E2838 size(1) Largest target is 1
		 -> button_read_state@logic(COMRAM[1]), keypad_read_button@logic_read(COMRAM[1]), 

    gpio_pin_write_logic@_pin_config	PTR struct . size(1) Largest target is 4
		 -> data_pins(COMRAM[4]), enable_pin(COMRAM[1]), led_initialize@pin_obj(COMRAM[1]), led_turn_off@pin_obj(COMRAM[1]), 
		 -> led_turn_on@pin_obj(COMRAM[1]), ?_multiplex(COMRAM[1]), pin_1(COMRAM[1]), pin_2(COMRAM[1]), 
		 -> pins(COMRAM[4]), relay_init@pin(COMRAM[1]), relay_turn_off@pin(COMRAM[1]), relay_turn_on@pin(COMRAM[1]), 
		 -> row_pins(COMRAM[4]), rs_pin(COMRAM[1]), 

    INT0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    INT1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    INT2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    Interrupt_INTx_Clear_Flag@int_obj$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Disable@int_obj$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Edge_Init@int_obj$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Enable@int_obj$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Pin_Init@int_obj$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Priority_Init@int_obj$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_SetInterruptHandler@int_obj$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 0

    keypad_init@keypad	const PTR const struct . size(1) Largest target is 9
		 -> keypad(COMRAM[9]), 

    keypad_read_button@keypad	const PTR const struct . size(1) Largest target is 9
		 -> keypad(COMRAM[9]), 

    keypad_read_button@read	PTR unsigned char  size(1) Largest target is 1
		 -> read(COMRAM[1]), 

    lat_regs	const PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> LATA(BITBIGSFRll[1]), LATB(BITBIGSFRlh[1]), LATC(BITBIGSFRlh[1]), LATD(BITBIGSFRlh[1]), 
		 -> LATE(BITBIGSFRlh[1]), 

    lcd_assign_pins@lcd	const PTR const struct lcd size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    lcd_init@lcd	PTR const struct lcd size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    lcd_send_command@lcd	PTR const struct lcd size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    lcd_send_data@lcd	PTR const struct lcd size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    port_regs	const PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> PORTA(BITBIGSFRll[1]), PORTB(BITBIGSFRll[1]), PORTC(BITBIGSFRll[1]), PORTD(BITBIGSFRll[1]), 
		 -> PORTE(BITBIGSFRll[1]), 

    S908$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 0

    tris_regs	const PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> TRISA(BITBIGSFRll[1]), TRISB(BITBIGSFRhll[1]), TRISC(BITBIGSFRhll[1]), TRISD(BITBIGSFRhll[1]), 
		 -> TRISE(BITBIGSFRhll[1]), 


Critical Paths under _main in COMRAM

    _set_1st_clear_4th->_clear_4th
    _lcd_send_data->_lcd_send_bits
    _keypad_read_button->_gpio_pin_write_logic
    _app_init->_ecu_layer_initialize
    _ecu_layer_initialize->_lcd_init
    _lcd_init->_lcd_send_command
    _lcd_send_command->_lcd_send_bits
    _lcd_send_bits->_lcd_send_enable_signal
    _lcd_send_enable_signal->_gpio_pin_write_logic
    _keypad_init->_gpio_pin_initialize
    _gpio_pin_initialize->_gpio_pin_write_logic

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   44227
                                             23 COMRAM     2     2      0
                           _app_init
                 _keypad_read_button
                      _lcd_send_data
                  _set_1st_clear_4th
 ---------------------------------------------------------------------------------
 (1) _set_1st_clear_4th                                    2     2      0      45
                                              1 COMRAM     2     2      0
                          _clear_4th
 ---------------------------------------------------------------------------------
 (2) _clear_4th                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_send_data                                        3     1      2   12622
                                             15 COMRAM     3     1      2
               _gpio_pin_write_logic
                    _lcd_assign_pins
                      _lcd_send_bits
 ---------------------------------------------------------------------------------
 (1) _keypad_read_button                                   7     5      2    4939
                                              9 COMRAM     7     5      2
        _assign_pins@ecu_keypad$F381
                _gpio_pin_read_logic
               _gpio_pin_write_logic
 ---------------------------------------------------------------------------------
 (2) _gpio_pin_read_logic                                  8     6      2     482
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _app_init                                             0     0      0   26621
               _ecu_layer_initialize
 ---------------------------------------------------------------------------------
 (2) _ecu_layer_initialize                                 1     1      0   26621
                                             22 COMRAM     1     1      0
                        _keypad_init
                           _lcd_init
 ---------------------------------------------------------------------------------
 (3) _lcd_init                                             4     3      1   20647
                                             18 COMRAM     4     3      1
                _gpio_pin_initialize
                    _lcd_assign_pins
                   _lcd_send_command
 ---------------------------------------------------------------------------------
 (4) _lcd_send_command                                     3     1      2   14598
                                             15 COMRAM     3     1      2
               _gpio_pin_write_logic
                    _lcd_assign_pins
                      _lcd_send_bits
 ---------------------------------------------------------------------------------
 (2) _lcd_send_bits                                        5     5      0    7498
                                             10 COMRAM     5     5      0
               _gpio_pin_write_logic
             _lcd_send_enable_signal
 ---------------------------------------------------------------------------------
 (3) _lcd_send_enable_signal                               1     1      0    3636
                                              9 COMRAM     1     1      0
               _gpio_pin_write_logic
 ---------------------------------------------------------------------------------
 (2) _lcd_assign_pins                                      4     3      1     660
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _keypad_init                                          2     1      1    5949
                                             11 COMRAM     2     1      1
        _assign_pins@ecu_keypad$F381
      _gpio_pin_direction_initialize
                _gpio_pin_initialize
 ---------------------------------------------------------------------------------
 (4) _gpio_pin_initialize                                  2     1      1    4967
                                              9 COMRAM     2     1      1
      _gpio_pin_direction_initialize
               _gpio_pin_write_logic
 ---------------------------------------------------------------------------------
 (4) _gpio_pin_write_logic                                 9     7      2    3611
                                              0 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (5) _gpio_pin_direction_initialize                        8     7      1     505
                                              0 COMRAM     8     7      1
 ---------------------------------------------------------------------------------
 (2) _assign_pins@ecu_keypad$F381                          4     3      1     308
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _app_init
     _ecu_layer_initialize
       _keypad_init
         _assign_pins@ecu_keypad$F381
         _gpio_pin_direction_initialize
         _gpio_pin_initialize
           _gpio_pin_direction_initialize
           _gpio_pin_write_logic
       _lcd_init
         _gpio_pin_initialize
         _lcd_assign_pins
         _lcd_send_command
           _gpio_pin_write_logic
           _lcd_assign_pins
           _lcd_send_bits
             _gpio_pin_write_logic
             _lcd_send_enable_signal
               _gpio_pin_write_logic
   _keypad_read_button
     _assign_pins@ecu_keypad$F381
     _gpio_pin_read_logic
     _gpio_pin_write_logic
   _lcd_send_data
     _gpio_pin_write_logic
     _lcd_assign_pins
     _lcd_send_bits
   _set_1st_clear_4th
     _clear_4th

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      41        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     19      52       1       64.6%
BITBIGSFRhll        59      0       0      38        0.0%
BITBIGSFRhh          D      0       0      37        0.0%
BITBIGSFRlh          4      0       0      39        0.0%
BITBIGSFRll          4      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      52      26        0.0%
DATA                 0      0      52       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Feb 15 00:43:44 2024

              _counter@ecu_seven_seg$F666 0007                            ?_lcd_send_data 0039  
                          ?_lcd_send_bits 002A                                        l55 16BC  
                                      l63 1A16                                        l59 1A4E  
                                     l141 1AD2                                       l215 1354  
                                     l225 1984                                       l137 1544  
                                     l138 15C2                                       l148 18FA  
                                     l238 1792                                       l424 14AE  
                                     l454 185E                                       l447 11E6  
                                     l464 1AAA                                       l376 1AE8  
                                     l672 1B10                                       l675 1B18  
                                     l669 1AF8             keypad_read_button@row_counter 0039  
                                     _lcd 004C                               lcd_init@lcd 003C  
                             lcd_init@ret 003F                       led_initialize@F2912 000F  
                                     wreg 0FE8                        lcd_assign_pins@lcd 002A  
                      lcd_assign_pins@ret 002C                                      l3001 1790  
                                    l3031 1B12                                      l1641 1B0C  
                                    l1801 1AEC                                      l1643 1B0E  
                                    l1803 1AEE                                      l1805 1AF6  
                                    l2711 14CC                                      l2703 14B0  
                                    l2801 126C                                      l2641 1030  
                                    l2721 1586                                      l2713 1532  
                                    l2705 14C4                                      l2803 12D2  
                                    l2651 10EA                                      l2643 1044  
                                    l2723 15BE                                      l2715 1534  
                                    l2813 12F0                                      l2653 1146  
                                    l2645 1060                                      l2717 1546  
                                    l2725 15C0                                      l2741 18AC  
                                    l2901 17F4                                      l3461 19A8  
                                    l2815 134C                                      l2807 12D8  
                                    l2655 114E                                      l2647 1080  
                                    l2719 1584                                      l2671 1ABA  
                                    l2751 18E0                                      l2743 18B2  
                                    l2735 186A                                      l2831 15E0  
                                    l2911 1AD4                                      l2903 17FC  
                                    l3463 19B0                                      l3455 1986  
                                    l2809 12DC                                      l2681 136A  
                                    l3481 1162                                      l2657 1178  
                                    l2649 1088                                      l2761 1A82  
                                    l2673 1AC2                                      l2753 18E2  
                                    l2737 189A                                      l2729 1862  
                                    l2841 15F2                                      l2913 1ADC  
                                    l2905 185C                                      l2921 19F4  
                                    l3465 19BE                                      l3457 198A  
                                    l2819 1352                                      l3483 1496  
                                    l2683 1386                                      l2659 11E4  
                                    l2763 1A86                                      l2675 1AD0  
                                    l2667 1AAC                                      l2755 18F2  
                                    l2739 189C                                      l2771 1A2C  
                                    l2851 1652                                      l2843 1602  
                                    l2827 15C4                                      l2923 19FE  
                                    l3467 19C2                                      l3459 1998  
                                    l3485 122E                                      l2693 146C  
                                    l2685 13A6                                      l2765 1A90  
                                    l2861 1914                                      l2669 1AAC  
                                    l2757 18F8                                      l2749 18B6  
                                    l2773 1A2C                                      l2845 1616  
                                    l2837 15E4                                      l2829 15D8  
                                    l2853 16BA                                      l2909 1AD4  
                                    l2925 1A0C                                      l2917 19E0  
                                    l2791 1210                                      l2783 11E8  
                                    l2687 13AE                                      l2695 14AC  
                                    l2679 1356                                      l2871 1946  
                                    l2863 191E                                      l2775 1A36  
                                    l2847 1626                                      l2839 15F0  
                                    l2919 19F4                                      l2927 1A14  
                                    l2793 1244                                      l2785 11F0  
                                    l2689 1410                                      l2873 1952  
                                    l2865 192E                                      l2857 18FC  
                                    l2777 1A44                                      l2769 1A18  
                                    l2849 1644                                      l2961 16BE  
                                    l2795 1254                                      l2787 11FC  
                                    l2883 1970                                      l2867 1932  
                                    l2859 190C                                      l2779 1A4C  
                                    l2971 1700                                      l2963 16CE  
                                    l2797 1258                                      l2789 1208  
                                    l2885 197C                                      l2877 1958  
                                    l2893 1794                                      l2965 16DE  
                                    l2879 195C                                      l2895 17A8  
                                    l2991 175C                                      l2967 16E6  
                                    l2889 1982                                      l2897 17B8  
                                    l2993 175E                                      l2985 1718  
                                    l2977 1704                                      l2969 16F0  
                                    l2899 17D4                                      l2995 176E  
                                    l2987 1728                                      l2979 1714  
                                    l2997 177E                                      l2989 173A  
                                    l2999 1780                                      u2000 173A  
                                    u2001 1736                                      u2010 176E  
                                    u2011 176A                                      u2020 1790  
                                    u2021 178C                                      _LATA 0F89  
                                    _LATB 0F8A                                      _LATC 0F8B  
                                    u1600 1044                                      _LATD 0F8C  
                                    u1601 1040                                      _LATE 0F8D  
                                    u1610 1060                                      u1611 105C  
                                    u1620 1080                                      u1621 107C  
                                    u1710 1482                                      u1711 147C  
                                    u1800 1254                                      u1720 1484  
                                    u1704 142E                                      u1801 1250  
                                    u1705 142A                                      u1810 1268  
                                    u1634 10A6                                      u1730 14C4  
                                    u1811 1264                                      u1635 10A2  
                                    u1731 14C0                                      u1660 136A  
                                    u1644 1108                                      u1740 1544  
                                    u1900 17A8                                      u2540 19A8  
                                    u1661 1366                                      u1645 1104  
                                    u1741 1540                                      u1901 17A4  
                                    u2541 19A4                                      u1830 12EC  
                                    u1670 1386                                      u1654 11C6  
                                    u1910 17B8                                      u1831 12E8  
                                    u1671 1382                                      u1655 11C2  
                                    u1911 17B4                                      u1680 13A6  
                                    u1760 18AC                                      u1840 15D8  
                                    u1920 17D4                                      u1825 12D0  
                                    u1681 13A2                                      u1761 18A8  
                                    u1841 15D4                                      u1921 17D0  
                                    u1826 12D2                                      u1754 1888  
                                    u1850 1602                                      u1930 17F4  
                                    u1755 1884                                      u1851 15FE  
                                    u1931 17F0                                      u1860 190C  
                                    u1780 18F2                                      u1861 1908  
                                    u1781 18EE                                      u2557 19CC  
                                    u1694 13CC                                      u1870 192E  
                                    u1774 18CE                                      u1790 1A2C  
                                    u1950 19F4                                      u1695 13C8  
                                    u1871 192A                                      u1775 18CA  
                                    u1791 1A28                                      u2567 161C  
                                    u1951 19F0                                      u1880 1942  
                                    u1944 1850                                      u1881 193E  
                                    u2577 163A                                      u1945 184C  
                                    u1890 196C                                      u1970 16CE  
                                    u1891 1968                                      u2587 1654  
                                    u1971 16CA                                      u1980 16DE  
                                    u2597 1ABC                                      u1981 16DA  
                                    u1990 1700                                      u1991 16FC  
          gpio_pin_read_logic@_pin_config 002A                                      _main 1986  
                                    _read 0025                                      _pins 0015  
                                    fsr1h 0FE2                                      fsr2h 0FDA  
                                    indf1 0FE7                                      indf2 0FDF  
                                    fsr1l 0FE1                                      fsr2l 0FD9  
                                    prodl 0FF3                                      start 0000  
               keypad_read_button@ret_val 0037                              ___param_bank 0000  
            gpio_pin_read_logic@ret_State 0031                      _gpio_pin_write_logic 1030  
                                   ?_main 002A                         ?_lcd_send_command 0039  
                     relay_turn_off@F2920 000A                                     _PORTA 0F80  
                                   _PORTB 0F81                                     _PORTC 0F82  
                                   _PORTD 0F83                                     _PORTE 0F84  
                                   _TRISA 0F92                                     _TRISB 0F93  
                                   _TRISC 0F94                                     _TRISD 0F95  
                                   _TRISE 0F96                        ??_lcd_send_command 003B  
                            ?_keypad_init 0035                                     _pin_1 0027  
                                   _pin_2 0026                                     tablat 0FF5  
                                   status 0FD8            ?_gpio_pin_direction_initialize 002A  
                         __initialization 1A50                           ??_lcd_send_data 003B  
                         ??_lcd_send_bits 0034                              __end_of_main 19E0  
                   ?_gpio_pin_write_logic 002A                  gpio_pin_read_logic@logic 002B  
                                  ??_main 0041                             __activetblptr 0003  
                        led_turn_on@F2926 000D         assign_pins@ecu_keypad$F381@keypad 002A  
             ecu_layer_initialize@ret_val 0040                    keypad_read_button@read 0034  
                        __end_of_app_init 1B1A                          __end_of_lcd_init 16BE  
                ??_lcd_send_enable_signal 0033                          __end_of_lat_regs 1025  
                                  _keypad 0043                                    clear_0 1A76  
                                  isa$std 0001                                    _rs_pin 0028  
                            __pdataCOMRAM 0043                              __mediumconst 0000  
                                  tblptrh 0FF7                                    tblptrl 0FF6  
                                  tblptru 0FF8       __end_of_assign_pins@ecu_keypad$F381 1356  
             _assign_pins@ecu_keypad$F381 11E8                                __accesstop 0080  
                 __end_of__initialization 1A7C                      lcd_send_bits@counter 0038  
                       _set_1st_clear_4th 1AEA                             ___rparam_used 0001  
                      ?_set_1st_clear_4th 002A                __end_of_keypad_read_button 1794  
                  ??_gpio_pin_write_logic 002C                            __pcstackCOMRAM 002A  
                     ??_set_1st_clear_4th 002B                          button_init@F2912 0014  
gpio_pin_direction_initialize@_pin_config 002A                 __end_of_set_1st_clear_4th 1AFA  
                   _INT0_InterruptHandler 0005                          lcd_send_data@lcd 0039  
                        lcd_send_data@ret 003B                                __pnvCOMRAM 0052  
                        lcd_send_bits@ret 0037                    button_read_state@F2923 0013  
                       led_turn_off@F2919 000E                     set_1st_clear_4th@buff 002C  
                         led_toggle@F2933 000C                                _enable_pin 0029  
                               ?_app_init 002A                                 ?_lcd_init 003C  
                       __end_of_clear_4th 1B12                              _enable_logic 0011  
                                 __Hparam 0000                                   __Lparam 0000  
                     _gpio_pin_initialize 1A82                         ??_lcd_assign_pins 002B  
                     _gpio_pin_read_logic 1794                              __psmallconst 1000  
                                 __pcinit 1A50                                   __ramtop 1000  
                                 __ptext0 1986                                   __ptext1 1AEA  
                                 __ptext2 1B0A                                   __ptext3 19E0  
                                 __ptext4 16BE                                   __ptext5 1794  
                                 __ptext6 1B12                                   __ptext7 1AD4  
                                 __ptext8 15C4                                   __ptext9 1A18  
         ??_gpio_pin_direction_initialize 002B                                   _counter 0012  
            keypad_read_button@logic_read 0036                                   _ret_val 0052  
                    ?_gpio_pin_initialize 0033                                ??_app_init 0041  
                    ?_gpio_pin_read_logic 002A                    _lcd_send_enable_signal 1AAC  
                              ??_lcd_init 003D                      end_of_initialization 1A7C  
                         lcd_init@counter 003E                         __end_of_port_regs 101B  
                                 postdec1 0FE5                                   postinc0 0FEE  
                   __end_of_lcd_send_data 1A18                     __end_of_lcd_send_bits 18FC  
                       __end_of_tris_regs 102F                     _INT1_InterruptHandler 0003  
                   ??_gpio_pin_initialize 0034                     ??_gpio_pin_read_logic 002C  
            gpio_pin_initialize@ret_State 0034                        relay_turn_on@F2928 0009  
                       relay_toggle@F2936 0008                             __pidataCOMRAM 1AFA  
                      _keypad_read_button 16BE                       start_initialization 1A50  
   __end_of_gpio_pin_direction_initialize 14B0             _gpio_pin_direction_initialize 1356  
                     ?_keypad_read_button 0033    gpio_pin_direction_initialize@ret_State 0031  
                        _lcd_send_command 1A18                      ??_keypad_read_button 0035  
                  lcd_assign_pins@counter 002D              __end_of_ecu_layer_initialize 1AEA  
                             __pbssCOMRAM 0001                         lcd_send_data@data 003A  
                           ??_keypad_init 0036                           _lcd_assign_pins 14B0  
                   _INT2_InterruptHandler 0001                         lcd_send_bits@bits 0036  
                               _data_pins 0021                                 _clear_4th 1B0A  
                    set_1st_clear_4th@num 002B           gpio_pin_write_logic@_pin_config 002A  
                     lcd_send_command@lcd 0039                       lcd_send_command@ret 003B  
               gpio_pin_write_logic@logic 002B                        keypad_init@ret_val 0036  
                             __smallconst 1000                   ?_lcd_send_enable_signal 002A  
                          _keypad_buttons 1001                       __end_of_keypad_init 1986  
                              ?_clear_4th 002A          keypad_read_button@column_counter 0038  
                keypad_read_button@keypad 0033                              clear_4th@num 002A  
                               _port_regs 1011            __end_of_lcd_send_enable_signal 1AD4  
                               _tris_regs 1025                               _column_pins 0019  
                 __end_of_lcd_assign_pins 15C4                           relay_init@F2912 000B  
                             _INTCON2bits 0FF1                               _INTCON3bits 0FF0  
                               copy_data0 1A64                    __end_of_keypad_buttons 1011  
            ?_assign_pins@ecu_keypad$F381 002A                      _ecu_layer_initialize 1AD4  
                                __Hrparam 0000                                  __Lrparam 0000  
                           _disable_logic 0010               __end_of_gpio_pin_initialize 1AAC  
             __end_of_gpio_pin_read_logic 1860                  __end_of_lcd_send_command 1A50  
          gpio_pin_initialize@_pin_config 0033             gpio_pin_write_logic@ret_State 0032  
                                __ptext10 1860                                  __ptext11 1AAC  
                                __ptext12 14B0                                  __ptext13 18FC  
                                __ptext14 1A82                                  __ptext15 1030  
                                __ptext16 1356                                  __ptext17 11E8  
                                _app_init 1B12                         keypad_init@keypad 0035  
                             _keypad_init 18FC                                  _lcd_init 15C4  
                                _lat_regs 101B                     ?_ecu_layer_initialize 002A  
           ??_assign_pins@ecu_keypad$F381 002B                               ??_clear_4th 002A  
               lcd_send_enable_signal@ret 0033                                  isa$xinst 0000  
                                _row_pins 001D                                _INTCONbits 0FF2  
                 lcd_send_command@command 003A                          ?_lcd_assign_pins 002A  
            __end_of_gpio_pin_write_logic 11E8        assign_pins@ecu_keypad$F381@ret_val 002D  
                           _lcd_send_data 19E0                             _lcd_send_bits 1860  
                  ??_ecu_layer_initialize 0040  
